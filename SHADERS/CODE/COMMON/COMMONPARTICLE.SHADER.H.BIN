////////////////////////////////////////////////////////////////////////////////
///
///     @file       CommonParticle.h
///     @author     User
///     @date       
///
///     @brief      CommonParticleShader
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 

#ifndef D_COMMONPARTICLE_H
#define D_COMMONPARTICLE_H

//-----------------------------------------------------------------------------
//      Include files


//-----------------------------------------------------------------------------
//      Global Data

#include "Common/CommonUniforms.shader.h"

//-----------------------------------------------------------------------------
//      Typedefs and Classes 


//-----------------------------------------------------------------------------
//    Functions

//-----------------------------------------------------------------------------
///
///     GetParticleColor
///
///     @brief      GetParticleColor
///
///     @param      void
///     @return     
///
//-----------------------------------------------------------------------------
vec4 
GetParticleColor(
    int liParticleId )
{
    return vec4( 1.0, 0.0, 0.0, 0.5 );// gCommon.gaParticleColoursVec4[ liParticleId ];
}

//-----------------------------------------------------------------------------
///
///     GetParticleViewPos
///
///     @brief      GetParticleViewPos
///
///     @param      void
///     @return     
///
//-----------------------------------------------------------------------------
vec4 
GetParticleViewPos(
    in vec3 lPositionVec3,
    in int  liParticleID,
    in int  liParticleCorner )
{
    /*
	vec3   lRightVec3 = gCommon.gWorldMat4[ 0 ].xyz;
	float lfScale    = sqrt( dot( lRightVec3, lRightVec3 ) );
	// Position
	vec3 lViewPositionVec3 = lPositionVec3 + gCommon.gaParticlePositionsVec4[ liParticleID ].xyz +
        gCommon.gaParticleCornersVec4[ liParticleCorner ].xyz * gCommon.gaParticleSizeAndRotationsVec4[ liParticleID ].x * lfScale;

    return MUL( gCommon.gViewMat4, vec4( lViewPositionVec3, 1.0 ) );
    */

    return vec4( 1.0 );
}

//-----------------------------------------------------------------------------
///
///     GetParticlePos
///
///     @brief      GetParticlePos
///
///     @param      void
///     @return     
///
//-----------------------------------------------------------------------------
vec4 
GetParticlePos(
    in UniformBuffer lUniforms,
    in vec3          lVertexPositionVec3,
    in int           liParticleID,
    in int           liParticleCorner )
{
    
    mat4  lCameraMat4 = mat4( 1.0, 0.0, 0.0, 0.0, 
                              0.0, 1.0, 0.0, 0.0,
                              0.0, 0.0, 1.0, 0.0,
                              0.0, 0.0, 0.0, 1.0 );
    vec4  lRotatedPositionVec3;
    vec3  lCornerPositionVec3;
    vec4  lAlignedPositionVec3;
    float lfRotation;
    float lfSin;
    float lfCos;
    float lfScale;

    lCameraMat4 = lUniforms.mpPerFrame->gCameraMat4;

	vec3   lRightVec3 = lUniforms.mpCommonPerMesh->gWorldMat4[ 0 ].xyz;

    lfScale       = lUniforms.mpCommonPerMesh->gaParticleSizeAndRotationsVec4[ liParticleID ].x * sqrt( dot( lRightVec3, lRightVec3 ) );
	lfRotation    = lUniforms.mpCommonPerMesh->gaParticleSizeAndRotationsVec4[ liParticleID ].y * 0.0174532925;
	
    #ifdef _F26_STRETCHY_PARTICLE
    vec3 lStretchDirVec3 = vec3( lUniforms.mpCommonPerMesh->gaParticleSizeAndRotationsVec4[ liParticleID ].z, lUniforms.mpCommonPerMesh->gaParticleSizeAndRotationsVec4[ liParticleID ].w, lUniforms.mpCommonPerMesh->gaParticlePositionsVec4[ liParticleID ].w );
	lfRotation = atan2( lStretchDirVec3.x, lStretchDirVec3.y );
    #endif

    lfSin = sin( lfRotation );
    lfCos = cos( lfRotation );

    mat4 lRotationMat4 = mat4( lfCos, -lfSin, 0, 0,
						       lfSin,  lfCos, 0, 0,
						       0,  0, 1, 0,
						       0,  0, 0, 1 );

    //lCameraMatrix[3] = vec4( gCommon.gaParticlePositionsVec4[ liParticleID ], 1.0 );
	// Once alex's math stuff is in this can be removed.
    lCameraMat4[3] = vec4( 0.0, 0.0, 0.0, 1.0 );
    lCameraMat4[0][3] = 0.0;
    lCameraMat4[1][3] = 0.0;
    lCameraMat4[2][3] = 0.0;
   
    // Corner Position
    lCornerPositionVec3      =  ( lUniforms.mpCommonPerMesh->gaParticleCornersVec4[ liParticleCorner ].xyz * lfScale );
	
    lRotatedPositionVec3     = MUL( lRotationMat4, vec4( lCornerPositionVec3, 1.0 ) );
    
	lAlignedPositionVec3     = MUL( lCameraMat4, lRotatedPositionVec3 );
	
    vec4 lFinalPositionVec4  = vec4( lAlignedPositionVec3.xyz + lUniforms.mpCommonPerMesh->gaParticlePositionsVec4[ liParticleID ].xyz, 1.0 );
	
    //stretching
    #ifdef _F26_STRETCHY_PARTICLE
		vec3 lPrevPosVec3    = lUniforms.mpCommonPerMesh->gaParticlePositionsVec4[ liParticleID ].xyz + lStretchDirVec3.xyz;
		vec3 lPrevCornerVec3 = lPrevPosVec3 + lAlignedPositionVec3.xyz;

		lFinalPositionVec4 = length( lStretchDirVec3.xyz ) < length( lPrevCornerVec3 - lUniforms.mpCommonPerMesh->gaParticlePositionsVec4[ liParticleID ].xyz ) 
		? lFinalPositionVec4 : vec4( lFinalPositionVec4.xyz - ( lStretchDirVec3.xyz ), 0.0 );
    #endif	

    return lFinalPositionVec4;    
}

#endif