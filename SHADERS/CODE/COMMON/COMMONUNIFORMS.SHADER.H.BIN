////////////////////////////////////////////////////////////////////////////////
///
///     @file       CommonUniforms.h
///     @author     User
///     @date       
///
///     @brief      CommonUniforms
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////


#ifndef D_COMMONUNIFORMS2_H
#define D_COMMONUNIFORMS2_H

#include "Common/Defines.shader.h"




struct PerFrameUniforms
{
    vec4    gLightPositionVec4;                 // EShaderConst_LightPositionVec4
    vec4    gLightDirectionVec4;                // EShaderConst_LightDirectionVec4
    vec3    gViewPositionVec3;                  // EShaderConst_ViewPositionVec3
    float   gfTime;                             // EShaderConst_Time
    vec4    gClipPlanesVec4;                    // EShaderConst_ClipPlanesVec4
    vec4    gClipPlanesRVec4;                   // EShaderConst_ClipPlanesRVec4

    mat4    gCameraMat4;                        // EShaderConst_CameraMat4

    vec4    gFrameBufferSizeVec4;   
    vec4    gShadowSizeVec4;   
    mat4    gViewMat4;                          // EShaderConst_ViewMat4

    //
    // These are per pass really. Probably just rename PerFrame to PerPass.
    //
    //mat4    gProjectionMat4;                    // EShaderConst_ProjectionMat4
    //mat4    gCameraMat4;                        // EShaderConst_CameraMat4
    //mat4    gaShadowMat4[ 2 ];   // EShaderConst_ShadowMat4
    //vec4    gClipPlanesVec4;                    // EShaderConst_ClipPlanesVec4

    //SAMPLER2D( gDualPMapFront );    // 32 bytes each
    //SAMPLER2D( gDualPMapBack );
    //SAMPLER2D( gCloudShadowMap );

    //SAMPLER2D( gFadeNoiseMap );

    //SAMPLER2D( gCausticMap );
    //SAMPLER2D( gCausticOffsetMap );

    // how to set samplers

    // putting these here would require removing them from the shader and material, and making them part of the common global
    // list so they can be set like the ones above... i think.
    // Fog
    //vec4 gSkyColourVec4;
    //vec4 gHorizonColourVec4;
    //vec4 gSunColourVec4;
    //vec4 gWaterColourNearVec4;
    //vec4 gWaterColourFarVec4;
    //vec4 gWaterFogVec4;
    //vec4 gHeightFogParamsVec4;
    //vec4 gHeightFogColourVec4;
    //vec4 gSpaceHorizonColourVec4;
    //vec4 gFogColourVec4;
    //vec4 gFogParamsVec4;
    //vec4 gScatteringParamsVec4;
    //vec4 gSpaceFogWavelength1Vec4;
    //vec4 gSpaceFogWavelength2Vec4;
    //vec4 gSpaceFogWavelength3Vec4;
    //vec4 gSpaceSkyColourVec4;
    //vec4 gFogFadeHeightsVec4;
    //vec4 gSunPositionVec4;
};



struct CommonPerMeshUniforms
{    
    // These are planet specific. Should they be here?
    vec4 gPlanetPositionVec4;

    // Stop these being compiled in when recolouring as the recolour shader needs ALL tex units.

    mat4    gInverseModelMat4;                     // EShaderConst_InverseModelMat4 = 0
    mat4    gWorldMat4;                            // EShaderConst_WorldMat4
    mat4    gWorldViewProjectionMat4;              // EShaderConst_WorldViewProjectionMat4
    mat4    gWorldNormalMat4;                      // EShaderConst_WorldNormalMat4

    float   gfFadeValue;                           // EShaderConst_FadeTime

    
#ifdef D_SKINNING_UNIFORMS
    vec4   gaSkinMatrixRowsVec4[ 75 * 3 ];        
#endif

    float   gfShadowBias;                       // EShaderConst_ShadowBias
     
   //  have particle shader use a particlecommon instead of uber, and put these into it.
#ifdef D_PARTICLE_UNIFORMS
    vec4    gaParticleCornersVec4[ 4 ];            // EShaderConst_ParticleCornersVec4
    vec4    gaParticlePositionsVec4[ 32 ];         // EShaderConst_ParticlePositionsVec4
    vec4    gaParticleSizeAndRotationsVec4[ 32 ];  // EShaderConst_ParticleSizeAndRotationsVec4
    vec4    gaParticleNormalsVec4[ 32 ];           // EShaderConst_ParticleNormalsVec4
    vec4    gaParticleColoursVec4[ 32 ];           // EShaderConst_ParticleColoursVec4
#endif

        // This stuff is here atm because of shadows. The shadow shader is one thing, but renders twice, with these needing to be set differently.
    // ideally we don't want them set per mesh though, probably a SRT for 'percamera' or something
    // 
    //
    mat4    gProjectionMat4;                    // EShaderConst_ProjectionMat4
    mat4    gViewProjectionMat4;               	// EShaderConst_ViewProjectionMat4
    mat4    gInverseViewMat4;                   // EShaderConst_InverseViewMat4
    mat4    gInverseProjectionMat4;             // EShaderConst_InverseProjectionMat4
    mat4    gInverseViewProjectionMat4;         // EShaderConst_InverseViewProjectionMat4
    mat4    gaShadowMat4[ 3 ];                  // EShaderConst_ShadowMat4
    
    vec4    gLightColourVec4;                   // EShaderConst_LightColourVec4
   	vec4	gGenericParam0Vec4;					// EShaderConst_GenericParam0Vec4
   	
    // These shouldn't be per mesh, the should be per rendertarget. BUT we need to add them to the enum
    // in egShader and SetPErRenderTargetUniforms for that to work and we're trying to do a build for sony
    // so that will have to wait. (also probably need a way of setting per RT uniforms from Game).
    vec4    gScanParamsPosVec4;
    vec4    gScanParamsCfg1Vec4;
    vec4    gScanParamsCfg2Vec4;
    vec4    gScanParamsCfg3Vec4;
    vec4    gScanColourVec4;

	    vec4 gSpotlightPositionVec4;
    vec4 gSpotlightDirectionVec4;
    
};

#endif

