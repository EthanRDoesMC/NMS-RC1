////////////////////////////////////////////////////////////////////////////////
///
///     @file       AtmosphereFragment.h
///     @author     User
///     @date       
///
///     @brief      SkyFragmentShader
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 


//-----------------------------------------------------------------------------
//      Include files

#include "Common/Defines.shader.h"
#include "Common/CommonUniforms.shader.h"

#include "Custom/AtmosphereCommon.h"


#include "Common/Common.shader.h"
#include "Common/CommonLighting.shader.h"
#include "Common/CommonPlanet.shader.h"
#include "Common/CommonScattering.shader.h"

//-----------------------------------------------------------------------------
//      Typedefs and Classes 

//-----------------------------------------------------------------------------
///
///     Input
///
///     @brief  Input
///
//-----------------------------------------------------------------------------
DECLARE_INPUT
IN_SCREEN_POSITION

INPUT( vec4, mWorldPositionVec4, TEXCOORD0 )
INPUT( vec4, mTexCoordsVec4, TEXCOORD1 )
INPUT( vec4, mWorldNormalVec3_mfDistanceFromPlanet, TEXCOORD2 )
#ifndef D_REFLECT
INPUT( vec4, mScreenSpacePositionVec4, TEXCOORD3 )
INPUT( float, mfLogZ, TEXCOORD4 )
#endif

DECLARE_END

#ifdef D_SCATTERING

#ifdef D_PLATFORM_ORBIS
#pragma argument(unrollallloops)
#endif

//-----------------------------------------------------------------------------
//    Functions


//-----------------------------------------------------------------------------
///
///     Main
///
///     @brief      Main Fragment
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
FRAGMENT_MAIN_COLOUR_DEPTH_SRT
{

    vec4 lFragmentColourVec4 = vec4( 0.0, 0.0, 0.0, 1.0 );
    vec3 lInScatteringVec3;
    vec3 lSkyScatteringVec3;

    float lfDistanceFromPlanet  = IN( mWorldNormalVec3_mfDistanceFromPlanet ) .w;

#ifdef D_SCATTER_MASK
    vec2 lCoords = ( IN( mScreenSpacePositionVec4 ).xy /  IN( mScreenSpacePositionVec4 ).w ) * 0.5 + vec2( 0.5 );
    lCoords      = SCREENSPACE_AS_RENDERTARGET_UVS( lCoords );

    float lfSceneDepth = FastDenormaliseDepth( lUniforms.mpPerFrame->gClipPlanesVec4, DecodeDepthFromColour( texture2D( lUniforms.mpCustomPerMaterial->gBufferMap, lCoords ) ) );
    if( lfSceneDepth < length( IN( mWorldPositionVec4 ).xyz - lUniforms.mpPerFrame->gViewPositionVec3 ) )
    {
        discard;
    }
    if( lfSceneDepth < lUniforms.mpPerFrame->gClipPlanesVec4.y && lfDistanceFromPlanet < 0.08 * lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w )
    {
        discard;
    }
#endif

    vec3  lSkyColour                 = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gSkyColourVec4.rgb );
    vec3  lHorizonColour             = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gHorizonColourVec4.rgb );
    vec3  lSunColour                 = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gSunColourVec4.rgb );
    float lfAtmosphereThickness = lUniforms.mpCustomPerMaterial->gScatteringParamsVec4.g;  
    float lfHorizonMultiplier        = lUniforms.mpCustomPerMaterial->gScatteringParamsVec4.b;
    float lfHorizonFadeSpeed         = lUniforms.mpCustomPerMaterial->gScatteringParamsVec4.a;
    float lfSkyAlpha                 = lUniforms.mpCustomPerMaterial->gSkyColourVec4.a;
    float lfHorizonAlpha             = lUniforms.mpCustomPerMaterial->gSunPositionVec4.a;
    float lfSunSize                  = lUniforms.mpCustomPerMaterial->gSunColourVec4.a;
    float lfSunStrength              = lUniforms.mpCustomPerMaterial->gHorizonColourVec4.a;
    float lfSpaceAtmosphereThickness = mix( lUniforms.mpCustomPerMaterial->gSpaceScatteringParamsVec4.g, lUniforms.mpCustomPerMaterial->gSpaceHorizonColourVec4.a, saturate( (lfDistanceFromPlanet - 300000.0f) / 600000.0f ) );
    float lfSpaceHorizonMultiplier   = lUniforms.mpCustomPerMaterial->gSpaceScatteringParamsVec4.b;
    float lfSpaceHorizonFadeSpeed    = lUniforms.mpCustomPerMaterial->gSpaceScatteringParamsVec4.a;
    float lfSpaceSunStrength         = lUniforms.mpCustomPerMaterial->gSpaceSkyColourVec4.a;
    float lfSpaceSunSize             = lUniforms.mpCustomPerMaterial->gSpaceSkyColour3Vec4.a;
    float lfAtmosphereSize           = 1.080000;
    float lfBlendTightness           = min( lUniforms.mpCustomPerMaterial->gScatteringParamsVec4.r, ( 0.8 - 0.1 ) * 0.5 );

    // Colour and alpha blending as we go to space
    float lfBlendStartHeight    = lUniforms.mpCustomPerMaterial->gFogFadeHeightsVec4.r;
    float lfBlendDistance       = lUniforms.mpCustomPerMaterial->gFogFadeHeightsVec4.g;
    float lfIsInSpace           = clamp( ( lfDistanceFromPlanet - lfBlendStartHeight ) / lfBlendDistance, 0.0, 1.0 );

    lfAtmosphereThickness = mix( lfAtmosphereThickness,   lfSpaceAtmosphereThickness, lfIsInSpace );
    lfHorizonMultiplier   = mix( lfHorizonMultiplier,     lfSpaceHorizonMultiplier,   lfIsInSpace );
    lfHorizonFadeSpeed    = mix( lfHorizonFadeSpeed,      lfSpaceHorizonFadeSpeed,    lfIsInSpace );
    lfSunStrength         = mix( lfSunStrength,           lfSpaceSunStrength,         lfIsInSpace );
    lfSunSize             = mix( lfSunSize,               lfSpaceSunSize,             lfIsInSpace );
    lfSkyAlpha            = mix( lfSkyAlpha, 0.0, lfIsInSpace );
    lfHorizonAlpha        = mix( lfHorizonAlpha, 0.0, lfIsInSpace );

    // Positions, with planet radius normalised
    vec3  lSunPositionVec3         = lUniforms.mpCustomPerMaterial->gSunPositionVec4.xyz;
    vec3  lLightPositionVec3       = normalize( -lUniforms.mpPerFrame->gLightDirectionVec4.xyz );
    vec3  lWorldPositionVec3       = ( IN( mWorldPositionVec4 ).xyz - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz ) / lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;
    vec3  lViewPositionVec3        = lUniforms.mpPerFrame->gViewPositionVec3 / lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz / lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;

    vec3  lSphereDirectionVec3     = normalize( IN( mWorldPositionVec4 ).xyz - lUniforms.mpPerFrame->gViewPositionVec3 );
    vec3  lUpDirectionVec3         = normalize( lUniforms.mpPerFrame->gViewPositionVec3 - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz );
    float lfTest                   = dot( lSphereDirectionVec3, lUpDirectionVec3 );

    vec3 lNearPosition;
    vec3 lFarPosition;
    GetRayIntersectionPoint( lViewPositionVec3, lWorldPositionVec3, lfAtmosphereSize, lViewPositionVec3, lFarPosition );

    // Light scattering
    lInScatteringVec3 = InScattering(
        lWorldPositionVec3,
        lLightPositionVec3,
        lViewPositionVec3,
        lfAtmosphereSize,
        lfHorizonFadeSpeed,
        lfAtmosphereThickness,
#ifdef D_REFLECT
        true,
#else
        false,
#endif		        
        false );

    // Sky colouring
    lSkyScatteringVec3 = InScatteringPhase(
        lInScatteringVec3,
        GammaCorrectInput( vec3( 1.0 ) ),
        lfSunStrength,
        lfHorizonFadeSpeed,
        RayleighPhase( lLightPositionVec3, lWorldPositionVec3 - lViewPositionVec3 ) );

    // Shift scattering to cover full range
    vec3 lAdjectedScatteringVec3 = vec3( smoothstep( 0.1 + lfBlendTightness, 0.8 - lfBlendTightness, lSkyScatteringVec3.x * lfHorizonMultiplier ) );
    vec3 lScatteringColourVec3   = mix( lSkyColour, lSkyColour * max( lSkyScatteringVec3.x, 1.0 ), lfIsInSpace );
    lScatteringColourVec3        = mix( lScatteringColourVec3, lHorizonColour, smoothstep( 0.0, 0.2, -lfTest ) * ( 1.0 - lfIsInSpace ) );
    lFragmentColourVec4.rgb      = mix( lScatteringColourVec3, lHorizonColour, saturate( lAdjectedScatteringVec3 ) );

    lFragmentColourVec4.a        = lfSkyAlpha;
    lFragmentColourVec4.a        = mix( lFragmentColourVec4.a, lfHorizonAlpha, smoothstep( 0.1, 0.55, lSkyScatteringVec3.x * lfHorizonMultiplier ) );
    lFragmentColourVec4.a        = mix( lFragmentColourVec4.a, smoothstep( 0.0, 0.18, lSkyScatteringVec3.x ), lfIsInSpace );

    // Sun colouring
    vec3 lSunScatteringVec3 = InScatteringPhase(
        lInScatteringVec3,
        lSunColour,
        1.0,
        1.0,
        MiePhase( lSunPositionVec3, lWorldPositionVec3 - lViewPositionVec3, lfSunSize ) );

    lFragmentColourVec4.rgb += lSunScatteringVec3;

    FRAGMENT_COLOUR = lFragmentColourVec4;

//#if !defined( D_REFLECT ) && !defined( D_SCATTERING )
//    FRAGMENT_DEPTH  = LinearToLogDepth_Pixel( IN( mfLogZ ), lUniforms.mpPerFrame->gClipPlanesVec4 );
//#endif

}

#endif


#ifdef D_CLOUD

//-----------------------------------------------------------------------------
///
///     Main
///
///     @brief      Main Fragment
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
FRAGMENT_MAIN_COLOUR_DEPTH_SRT
{
    vec4 lFragmentColourVec4 = vec4( 1.0, 0.0, 0.0, 1.0 );

    //float lCloudCover = texture2D( lUniforms.mpCustomPerMesh->gDiffuseMap, IN( mTexCoordsVec4 ).xy ).a;
    float lfDarkSide = dot( normalize( IN( mWorldNormalVec3_mfDistanceFromPlanet ).xyz ), lUniforms.mpCustomPerMaterial->gSunPositionVec4.xyz ) * 0.5 + 0.5;
    lfDarkSide       = smoothstep( 0.2, 0.5, lfDarkSide );

    float lfDistanceFade =  IN( mWorldNormalVec3_mfDistanceFromPlanet ).w;
    lfDistanceFade = clamp( ( lfDistanceFade - 3500.0 ) / 3000.0, 0.0, 1.0 );

    lFragmentColourVec4 =  texture2D( lUniforms.mpCustomPerMaterial->gDiffuseMap, IN( mTexCoordsVec4 ).xy );

#ifdef D_SHADOW
    lFragmentColourVec4      = vec4( smoothstep( 0.0, 0.3, lFragmentColourVec4.a ) );
    lFragmentColourVec4.rgb *= 0.2;
    lFragmentColourVec4.a    = min( lFragmentColourVec4.a, 0.35 ) * lfDistanceFade;
#endif

    lFragmentColourVec4.rgb *= lfDarkSide * lfDistanceFade * 0.75;

    FRAGMENT_COLOUR = lFragmentColourVec4;

#if !defined(D_REFLECT)
    FRAGMENT_DEPTH  = LinearToLogDepth_Pixel( IN( mfLogZ ), lUniforms.mpPerFrame->gClipPlanesVec4 );
#endif

}


#endif