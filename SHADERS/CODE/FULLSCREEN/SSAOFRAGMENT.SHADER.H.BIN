//-----------------------------------------------------------------------------
//      Functions 


#define PI    3.14159265

float width = 1024.0; //texture width
float height = 720.0; //texture height


//------------------------------------------
//general stuff

//make sure that these two values are the same for your camera, otherwise distances will be wrong.


float znear = 0.01; //Z-near
float zfar = 48000.0; //Z-far
// float znear = 1.0; //Z-near
// float zfar = 1024.0; //Z-far

//user variables
int samples = 16; //ao sample count

float radius = 3.0; //ao radius
float aoclamp = 0.25; //depth clamp - reduces haloing at screen edges
bool noise = true; //use noise instead of pattern for sample dithering
float noiseamount = 0.0002; //dithering amount

float diffarea  = 0.4; //self-shadowing reduction
float gdisplace = 0.4; //gauss bell center

bool mist = false; //use mist?
float miststart = 0.0; //mist start
float mistend = 16.0; //mist end

bool onlyAO = false; //use only ambient occlusion pass?
float lumInfluence = 0.7; //how much luminance affects occlusion


//--------------------------------------------------------

vec2 
rand(vec2 coord) //generating noise/pattern texture for dithering
{
    float noiseX = ((fract(1.0-coord.s*(width/2.0))*0.25)+(fract(coord.t*(height/2.0))*0.75))*2.0-1.0;
    float noiseY = ((fract(1.0-coord.s*(width/2.0))*0.75)+(fract(coord.t*(height/2.0))*0.25))*2.0-1.0;

    if (noise)
    {
        noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;
        noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;
    }
    return vec2(noiseX,noiseY)*noiseamount;
}

float 
doMist()
{
    //float zdepth = texture2D(gBuffer1Map, IN( mTexCoordsVec2 ).xy).x;
    //float depth = -zfar * znear / (zdepth * (zfar - znear) - zfar);
    float depth = LogToLinearDepth( texture2D(gBuffer1Map, IN( mTexCoordsVec2 ).xy ).x );

    return clamp((depth-miststart)/mistend,0.0,1.0);
}

float 
readDepth(in vec2 coord) 
{
    if (IN( mTexCoordsVec2 ).x<0.0|| IN( mTexCoordsVec2 ).y<0.0) return 1.0;
    
    //return (2.0 * znear) / (zfar + znear - texture2D(gBuffer1Map, coord ).x * (zfar-znear));
    return (LogToLinearDepth( texture2D(gBuffer1Map, coord ).x ) - znear) / (zfar-znear);

    //return (nearZ + posZ * (farZ - nearZ));  
}

float 
compareDepths(in float depth1, in float depth2,inout int far)
{
    float garea = 2.0; //gauss bell width    
    float diff = (depth1 - depth2)*100.0; //depth difference (0-100)
    //reduce left bell width to avoid self-shadowing 
    if (diff<gdisplace)
    {
        garea = diffarea;
    }
    else
    {
        far = 1;
    }

    float gauss = pow(2.7182,-2.0*(diff-gdisplace)*(diff-gdisplace)/(garea*garea));
    return gauss;
}   

float calAO(float depth,float dw, float dh)
{   
    float dd = (1.0-depth)*radius;

    float temp = 0.0;
    float temp2 = 0.0;
    float coordw = IN( mTexCoordsVec2 ).x + dw*dd;
    float coordh = IN( mTexCoordsVec2 ).y + dh*dd;
    float coordw2 = IN( mTexCoordsVec2 ).x - dw*dd;
    float coordh2 = IN( mTexCoordsVec2 ).y - dh*dd;

    vec2 coord = vec2(coordw , coordh);
    vec2 coord2 = vec2(coordw2, coordh2);

    int far = 0;
    temp = compareDepths(depth, readDepth(coord),far);
    //DEPTH EXTRAPOLATION:
    if (far > 0)
    {
        temp2 = compareDepths(readDepth(coord2),depth,far);
        temp += (1.0-temp)*temp2;
    }

    return temp;
} 

void main(void)
{
    vec2 noise = rand(IN( mTexCoordsVec2 ).xy); 
    //vec2 noise = vec2(0.0); 
    float depth = readDepth(IN( mTexCoordsVec2 ).xy);

    float w = (1.0 / width)/clamp(depth,aoclamp,1.0)+(noise.x*(1.0-noise.x));
    float h = (1.0 / height)/clamp(depth,aoclamp,1.0)+(noise.y*(1.0-noise.y));

    float pw;
    float ph;

    float ao;

    float dl = PI*(3.0-sqrt(5.0));
    float dz = 1.0/float(samples);
    float l = 0.0;
    float z = 1.0 - dz/2.0;

    for (int i = 0; i <= samples; i ++)
    {     
        float r = sqrt(1.0-z);

        pw = cos(l)*r;
        ph = sin(l)*r;
        ao += calAO(depth,pw*w,ph*h);        
        z = z - dz;
        l = l + dl;
    }

    ao /= float(samples);
    ao = 1.0-ao;	

    //ao = clamp( depth, 0.0, 1.0 );

    gl_FragColor = vec4(ao,ao,ao,1.0); 
    /*
    if (mist)
    {
        ao = mix(ao, 1.0,doMist());
    }
    */
    /*
    vec3 color = texture2D(gBufferMap,IN( mTexCoordsVec2 ).xy).rgb;
    color = pow( color, 1.0/2.2 );

    vec3 lumcoeff = vec3(0.299,0.587,0.114);
    float lum = dot(color.rgb, lumcoeff);
    vec3 luminance = vec3(lum, lum, lum);

    vec3 final = vec3(color*mix(vec3(ao),vec3(1.0),luminance*lumInfluence));//mix(color*ao, white, luminance)
    */
    //vec3 final = color;
    
    /*
    if (onlyAO)
    {
        final = vec3(mix(vec3(ao),vec3(1.0),luminance*lumInfluence)); //ambient occlusion only
    }*/
    

    
    //gl_FragColor = vec4(final,1.0); 
}

//#endif

#if 0
float depthDiffScale = gGraphicsGlobalsVec4.x; //depth difference (0-100)
float gdisplace      = gGraphicsGlobalsVec4.y; //gauss bell center
//float gdisplace      = 0.4; //gauss bell center
float gaussWidth     = gGraphicsGlobalsVec4.z; //gauss bell width 2
float diffarea       = gGraphicsGlobalsVec4.w; //self-shadowing reduction
//float diffarea       = 0.4; //self-shadowing reduction

//uniform sampler2D som;  // Depth texture  
//uniform sampler2D rand; // Random texture 
uniform vec2 camerarange = vec2(1.0, 1024.0);
//uniform vec2 camerarange = vec2(0.1, 4800.0);
/*
float pw = 1.0/gFrameBufferSizeVec2.x*0.5; 
float ph = 1.0/gFrameBufferSizeVec2.y*0.5;  
*/
float pw = 1.0/1280.0*0.5; 
float ph = 1.0/720.0*0.5;  

float readDepth(in vec2 coord)  
{  
    if (coord.x<0||coord.y<0) return 1.0;
    float nearZ = camerarange.x;  
    float farZ = camerarange.y;  
    float posZ = texture2D(gBuffer1Map, coord).x;   
    
    return (2.0 * nearZ) / (nearZ + farZ - posZ * (farZ - nearZ));  
    //return (nearZ + posZ * (farZ - nearZ));  
}   

float compareDepths(in float depth1, in float depth2,inout int far)  
{  

    float diff = (depth1 - depth2)*depthDiffScale; //depth difference (0-100)
    float garea = gaussWidth; //gauss bell width 2

    //reduce left bell width to avoid self-shadowing
    if (diff<gdisplace)
    { 
        garea = diffarea;
    }else
    {
        far = 1;
    }

    float gauss = pow(2.7182,-2*(diff-gdisplace)*(diff-gdisplace)/(garea*garea));

    return gauss;
}  

float calAO(float depth,float dw, float dh)  
{  
    float temp = 0;
    float temp2 = 0;
    float coordw = IN( mTexCoordsVec2 ).x + dw/depth;
    float coordh = IN( mTexCoordsVec2 ).y + dh/depth;
    float coordw2 = IN( mTexCoordsVec2 ).x - dw/depth;
    float coordh2 = IN( mTexCoordsVec2 ).y - dh/depth;

    if (coordw  < 1.0 && coordw  > 0.0 && coordh < 1.0 && coordh  > 0.0){
        vec2 coord = vec2(coordw , coordh);
        vec2 coord2 = vec2(coordw2, coordh2);
        int far = 0;
        temp = compareDepths(depth, readDepth(coord),far);

        //DEPTH EXTRAPOLATION:
        if (far > 0){
            temp2 = compareDepths(readDepth(coord2),depth,far);
            temp += (1.0-temp)*temp2; 
        }
    }

    return temp;  
}   

void main(void)  
{  
    //randomization texture:
    
    vec2 fres = vec2(20.0 ,20.0 );
    vec3 random = texture2D(gNoise, IN( mTexCoordsVec2 ).xy*fres.xy);
    //vec3 random = vec3(1.0);
    random = random*2.0-vec3(1.0);
    
    //initialize stuff:
    float depth = readDepth( IN( mTexCoordsVec2 ).xy );  
    
    float ao = 0.0;

    for(int i=0; i<4; ++i) 
    {  
        //calculate color bleeding and ao:
        ao+=calAO(depth,  pw, ph);  
        ao+=calAO(depth,  pw, -ph);  
        ao+=calAO(depth,  -pw, ph);  
        ao+=calAO(depth,  -pw, -ph);

        ao+=calAO(depth,  pw*1.2, 0);  
        ao+=calAO(depth,  -pw*1.2, 0);  
        ao+=calAO(depth,  0, ph*1.2);  
        ao+=calAO(depth,  0, -ph*1.2);

        //sample jittering:
        pw += random.x*(0.0007);
        ph += random.y*(0.0007);

        //increase sampling area:
        pw *= 1.7;  
        ph *= 1.7;    
    }         

    //final values, some adjusting:
    vec3 finalAO = vec3(1.0-(ao/32.0));


    //gl_FragColor = vec4(0.3+finalAO*0.7,1.0);  
    gl_FragColor = vec4(finalAO,1.0);  
    //gl_FragColor = vec4( vec3( 1.0 - (depth / 100.0)),1.0);  
    

    /*
    if ( depth < 5.0 )
    {
        gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0);  
    }
    else
    if ( depth < 10.0 )
    {
        gl_FragColor = vec4( 0.0, 1.0, 0.0, 1.0);  
    }
    else
    if ( depth < 20.0 )
    {
        gl_FragColor = vec4( 0.0, 0.0, 1.0, 1.0);  
    }
    else
    if ( depth < 50.0 )
    {
        gl_FragColor = vec4( 1.0, 1.0, 0.0, 1.0);  
    }
    else
    {
        gl_FragColor = vec4( 0.0, 1.0, 1.0, 1.0);  
    }*/
    
}  

#endif

#if 0

#define PI    3.14159265

float width = 1024.0; //texture width
float height = 720.0; //texture height

float near = 0.3; //Z-near
float far = 40.0; //Z-far

int samples = 3; //samples on the first ring (3 - 5)
int rings = 3; //ring count (3 - 5)

float radius = 0.9; //ao radius

bool noise = false; //use noise instead of pattern for sample dithering

vec2 texCoord = IN( mTexCoordsVec2 );

vec2 rand(in vec2 coord) //generating noise/pattern texture for dithering
{
    float noiseX = ((fract(1.0-coord.s*(width/2.0))*0.25)+(fract(coord.t*(height/2.0))*0.75))*2.0-1.0;
    float noiseY = ((fract(1.0-coord.s*(width/2.0))*0.75)+(fract(coord.t*(height/2.0))*0.25))*2.0-1.0;

    if (noise)
    {
        noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;
        noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;
    }
    return vec2(noiseX,noiseY)*0.001;
}

float readDepth(in vec2 coord) 
{
    if (coord.x<0.0||coord.y<0.0) return 1.0;
    //return (2.0 * near) / (far + near - texture2D(bgl_DepthTexture, coord ).x * (far-near));
    return (near + texture2D(gBuffer1Map, coord ).x * (far - near)); 
}

float compareDepths(in float depth1, in float depth2,inout int far)
{       
    float diff = (depth1 - depth2)*100.0; //depth difference (0-100)
    float gdisplace = 0.4; //gauss bell center
    float garea = 2.0; //gauss bell width 2
    //reduce left bell width to avoid self-shadowing 
    if (diff<gdisplace)
    {
        garea = 0.6;
    }else{
        far = 1;
    }

    float gauss = pow(2.7182,-2.0*(diff-gdisplace)*(diff-gdisplace)/(garea*garea));
    return gauss;
}  

float calAO(float depth,float dw, float dh)
{   
    float dd = (1.0-depth)*radius;
    //float dd = radius;
    float temp = 0.0;
    float temp2 = 0.0;
    float coordw = texCoord.x + dw*dd;
    float coordh = texCoord.y + dh*dd;
    float coordw2 = texCoord.x - dw*dd;
    float coordh2 = texCoord.y - dh*dd;

    vec2 coord = vec2(coordw , coordh);
    vec2 coord2 = vec2(coordw2, coordh2);

    int far = 0;
    temp = compareDepths(depth, readDepth(coord),far);
    //DEPTH EXTRAPOLATION:
    if (far > 0)
    {
        temp2 = compareDepths(readDepth(coord2),depth,far);
        temp += (1.0-temp)*temp2;
    }

    return temp;
} 

void main(void)
{
    vec2 noise = rand(texCoord); 
    float depth = readDepth(texCoord);
    float d;

    float w = (1.0 / width)/clamp(depth,0.25,1.0)+(noise.x*(1.0-noise.x));
    float h = (1.0 / height)/clamp(depth,0.25,1.0)+(noise.y*(1.0-noise.y));

    float pw;
    float ph;

    float ao;
    float s;

    int ringsamples;

    for (int i = 1; i <= rings; i += 1)
    {
        ringsamples = i * samples;
        s += 1.0;
        for (int j = 0 ; j < ringsamples ; j += 1)
        {
            float step = PI*2.0 / float(ringsamples);
            pw = (cos(float(j)*step)*float(i));
            ph = (sin(float(j)*step)*float(i));
            ao += calAO(depth,pw*w,ph*h);
            s += 1.0;
        }
    }


    ao /= s;
    ao = 1.0-ao;	

    /*
    vec3 color = texture2D(bgl_RenderedTexture,texCoord).rgb;

    vec3 lumcoeff = vec3(0.299,0.587,0.114);
    float lum = dot(color.rgb, lumcoeff);
    vec3 luminance = vec3(lum, lum, lum);
    */

    //gl_FragColor = vec4(vec3(color*mix(vec3(ao),vec3(1.0),luminance)),1.0); //mix(color*ao, white, luminance)
    //gl_FragColor = vec4(vec3(mix(vec3(ao),vec3(1.0),luminance)),1.0); //mix(ao, white, luminance)
    gl_FragColor = vec4(vec3(ao),1.0); //ambient occlusion only
}
#endif