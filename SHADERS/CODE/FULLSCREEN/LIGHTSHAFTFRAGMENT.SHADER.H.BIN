////////////////////////////////////////////////////////////////////////////////
///
///     @file       PostProcessFragment.h
///     @author     User
///     @date       
///
///     @brief      DepthOfFieldFragmentShader
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 

//-----------------------------------------------------------------------------
//      Include files

#include "Common/Defines.shader.h"
#include "Common/CommonUniforms.shader.h"
#include "Common/CommonScattering.shader.h"
#include "Common/CommonDepth.shader.h"
#include "Common/CommonGBuffer.shader.h"
#include "LightCommon.shader.h"
#include "Common/CommonLighting.shader.h"

#ifdef D_PLATFORM_ORBIS
#pragma argument(unrollallloops)
#endif

// =================================================================================================
//
// RAYMARCH
//
// =================================================================================================

#ifdef D_SCATTERING

//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION
    INPUT( vec2, mTexCoordsVec2,  TEXCOORD0 )
    //INPUT( vec4, mCornerRayVec4, TEXCOORD5 )
DECLARE_END

FRAGMENT_MAIN_COLOUR_SRT
{
    vec4  lFragmentColourVec4 = vec4( 0.0 );
    vec2  lFragCoordsVec2     = IN( mTexCoordsVec2 );

    // Get fragment position
    vec3  lWorldPositionVec3           = vec3( 0.0 );
    vec3  lCameraRelativePositionVec3  = vec3( 0.0 );
    {
        // Read depth from g-buffer
        float lfDepth          = FastDenormaliseDepth( lUniforms.mpPerFrame->gClipPlanesVec4, DecodeDepthFromColour( texture2D( lUniforms.mpCustomPerMaterial->gBufferMap, lFragCoordsVec2 ) ) );

        // Mask out sky
        if( lfDepth >= lUniforms.mpPerFrame->gClipPlanesVec4.y - 100.0 )
        {
           FRAGMENT_COLOUR = vec4(0.0);
           return;
        }

        // Recreate position
        lWorldPositionVec3          = RecreatePositionFromDepth( lfDepth, lFragCoordsVec2, lUniforms.mpPerFrame->gViewPositionVec3, lUniforms.mpCommonPerMesh->gInverseProjectionMat4, lUniforms.mpCommonPerMesh->gInverseViewMat4 );
        lCameraRelativePositionVec3 = lWorldPositionVec3 - lUniforms.mpPerFrame->gViewPositionVec3;
    }


    // Find nearest planet
    vec3  lPrimaryPlanetPositionVec3 = lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz;
    float lfPrimaryPlanetRadius      = lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;
    vec3  lNearestPlanetPosition     = lPrimaryPlanetPositionVec3;
    vec3  lPlanetHorizonColour       = lUniforms.mpCustomPerMaterial->gHorizonColourVec4.xyz;
    float lfNearestPlanetRadius      = lfPrimaryPlanetRadius;
    {
        float lfDistance                 = length( lNearestPlanetPosition - lWorldPositionVec3 );

        for( int i = 0; i < 6; i++ )
        {
            float lfNewDistance  = length( ( lUniforms.mpCustomPerMaterial->gaPlanetPositionsVec4[ i ].xyz - lWorldPositionVec3 ) );
            lfNewDistance       -= lUniforms.mpCustomPerMaterial->gaPlanetPositionsVec4[ i ].w;
            if( lfNewDistance <= lfDistance && lUniforms.mpCustomPerMaterial->gaPlanetPositionsVec4[ i ].w > 0.0 )
            {
                lPlanetHorizonColour   = lUniforms.mpCustomPerMaterial->gaPlanetColoursVec4[ i ].xyz;
                lNearestPlanetPosition = lUniforms.mpCustomPerMaterial->gaPlanetPositionsVec4[ i ].xyz;
                lfNearestPlanetRadius  = lUniforms.mpCustomPerMaterial->gaPlanetPositionsVec4[ i ].w;
                lfDistance             = lfNewDistance;
            }
        }
    }


    // Calculate various height fade values to interpolate between fog settings
    float lfIsInSpace            = 0.0;
    float lfColourFade           = 0.0;
    float lfHorizonPlanetFade    = 0.0;
    float lfParamFade            = 0.0;
    float lfFogStrengthFade      = 0.0;
    float lfThisIsPrimaryPlanet  = 0.0;
    float lfParamFadeMix         = 0.0;
    {
        float lfBlendStartHeight         = lUniforms.mpCustomPerMaterial->gFogFadeHeightsVec4.r;
        float lfBlendDistance            = lUniforms.mpCustomPerMaterial->gFogFadeHeightsVec4.g;
        float lfFogStrengthStartHeight   = lUniforms.mpCustomPerMaterial->gFogFadeHeightsVec4.b;
        float lfFogStrengthDistance      = lUniforms.mpCustomPerMaterial->gFogFadeHeightsVec4.a;
        float lfPositionBlendStartHeight = lUniforms.mpCustomPerMaterial->gFogFadeHeights2Vec4.r;
        float lfPositionBlendDistance    = lUniforms.mpCustomPerMaterial->gFogFadeHeights2Vec4.g;
        float lfColourBlendStartHeight   = lUniforms.mpCustomPerMaterial->gFogFadeHeights2Vec4.b;
        float lfColourBlendDistance      = lUniforms.mpCustomPerMaterial->gFogFadeHeights2Vec4.a;
        float lfFogStrengthPower         = lUniforms.mpCustomPerMaterial->gSpaceFogParamsVec4.a;

        float lfDistanceFromPlanet  = length( lUniforms.mpPerFrame->gViewPositionVec3 - lNearestPlanetPosition ) - lfNearestPlanetRadius;
        float lfDistanceFromPrimary = length( lUniforms.mpPerFrame->gViewPositionVec3 - lPrimaryPlanetPositionVec3 ) - lfPrimaryPlanetRadius;

        float lfIsOffPrimaryPlanet  = clamp( ( lfDistanceFromPrimary - lfColourBlendStartHeight ) / lfColourBlendDistance, 0.0, 1.0 );
        lfIsInSpace                 = clamp( ( lfDistanceFromPlanet - lfColourBlendStartHeight ) / lfColourBlendDistance, 0.0, 1.0 );
        lfColourFade                = mix( lfIsOffPrimaryPlanet, 0.0, ( 1.0 - lfIsOffPrimaryPlanet ) * lfIsInSpace );

        lfIsOffPrimaryPlanet        = clamp( ( lfDistanceFromPrimary - lfBlendStartHeight ) / lfBlendDistance, 0.0, 1.0 );
        lfIsInSpace                 = clamp( ( lfDistanceFromPlanet - lfBlendStartHeight ) / lfBlendDistance, 0.0, 1.0 );
        lfParamFade                 = mix( lfIsOffPrimaryPlanet, 0.0, ( 1.0 - lfIsOffPrimaryPlanet ) * lfIsInSpace );

        lfIsOffPrimaryPlanet        = clamp( ( lfDistanceFromPrimary - lfFogStrengthStartHeight ) / lfFogStrengthDistance, 0.0, 1.0 );
        lfIsInSpace                 = clamp( ( lfDistanceFromPlanet -  lfFogStrengthStartHeight ) / lfFogStrengthDistance, 0.0, 1.0 );
        lfFogStrengthFade           = mix( lfIsOffPrimaryPlanet, 0.0, ( 1.0 - lfIsOffPrimaryPlanet ) * lfIsInSpace );
        lfFogStrengthFade           = 1.0 - clamp( pow( 1.0 - lfFogStrengthFade, lfFogStrengthPower ), 0.0, 1.0 );

        lfThisIsPrimaryPlanet       = ( abs( lfDistanceFromPlanet - lfDistanceFromPrimary ) < 100.0 ) ? 1.0 : 0.0;
        lfIsInSpace                 = clamp( ( lfDistanceFromPlanet - lfPositionBlendStartHeight ) / lfPositionBlendDistance, 0.0, 1.0 );
        
        lfParamFadeMix              = max( lfParamFade, lfThisIsPrimaryPlanet );
    }

    // Shared values
    float lfAtmosphereSize                 = 1.080000;
    float lfSunStrength                    = lUniforms.mpCustomPerMaterial->gHorizonColourVec4.a;
    vec3  lLightDirectionVec3              = normalize( -lUniforms.mpPerFrame->gLightDirectionVec4.xyz );

    vec3  lPlanetRelativeViewPositionVec3  = ( lUniforms.mpPerFrame->gViewPositionVec3 - lNearestPlanetPosition );
    vec3  lPlanetRelativePositionVec3      = ( lWorldPositionVec3 - lNearestPlanetPosition );

    // Create water plane, as water is not rendered to the g-buffer
    float lfWaterHeight = lUniforms.mpCustomPerMaterial->gWaterFogVec4.r;
    {    
        // Calculate positions relative to planet
        vec3  lDummyPositionVec3;
        vec3  lWaterHitPositionVec3;
        float lfRayTest         = GetRayIntersectionPoint( lPlanetRelativeViewPositionVec3, lPlanetRelativePositionVec3, (lfNearestPlanetRadius + lfWaterHeight), lWaterHitPositionVec3, lDummyPositionVec3 );

        // If we hit the sphere and the water plane is closer than the original point
        if( lfRayTest > 0.0 && 
            length( lPlanetRelativeViewPositionVec3 - lPlanetRelativePositionVec3 ) > length( lPlanetRelativeViewPositionVec3 - lWaterHitPositionVec3 ) && 
            length( lPlanetRelativeViewPositionVec3 - lWaterHitPositionVec3 ) > 0.0 )
        {
            lWorldPositionVec3          = lWaterHitPositionVec3 + lNearestPlanetPosition;
            lCameraRelativePositionVec3 = lWaterHitPositionVec3 + lNearestPlanetPosition -  lUniforms.mpPerFrame->gViewPositionVec3;
            lPlanetRelativePositionVec3 = lWaterHitPositionVec3;
        }
    }

    // Atmosphere scattering
    vec3 lAtmosphereScattering = vec3( 1.0, 0.0, 0.0 );
    if ( ( lfColourFade < 1.0) || (lfParamFadeMix < 1.0) )
    {
        vec3  lHorizonColour        = /*GammaCorrectInput*/ ( lUniforms.mpCustomPerMaterial->gHorizonColourVec4.rgb );

        vec3  lPrimaryRelativeViewPositionVec3 = ( lUniforms.mpPerFrame->gViewPositionVec3 - lPrimaryPlanetPositionVec3 ) / lfPrimaryPlanetRadius;
        vec3  lDirectionToAtmosphereVec3       = normalize( lCameraRelativePositionVec3 );
        vec3  lUpDirectionVec3                 = normalize( lUniforms.mpPerFrame->gViewPositionVec3 - lPrimaryPlanetPositionVec3 );
        
        float lfAngleTest                      = dot( lDirectionToAtmosphereVec3, lUpDirectionVec3 );
        lfAngleTest                            = smoothstep( 0.0, 0.2, -lfAngleTest );

        if( lfAngleTest < 1.0 )
        {
            vec3  lAtmospherePositionVec3  = normalize( GetFarRayIntersectionPoint( ( lUniforms.mpPerFrame->gViewPositionVec3 - lPrimaryPlanetPositionVec3 ), lDirectionToAtmosphereVec3, lfAtmosphereSize * lfPrimaryPlanetRadius ) ) * lfAtmosphereSize;

            vec3  lSkyColour            = /*GammaCorrectInput*/ ( lUniforms.mpCustomPerMaterial->gSkyColourVec4.rgb );
            vec3  lSunColour            = /*GammaCorrectInput*/ ( lUniforms.mpCustomPerMaterial->gSunColourVec4.rgb );
            float lfAtmosphereThickness = lUniforms.mpCustomPerMaterial->gScatteringParamsVec4.g;
            float lfHorizonMultiplier   = lUniforms.mpCustomPerMaterial->gScatteringParamsVec4.b;
            float lfHorizonFadeSpeed    = lUniforms.mpCustomPerMaterial->gScatteringParamsVec4.a;
            float lfBlendTightness      = min( lUniforms.mpCustomPerMaterial->gScatteringParamsVec4.r, ( 0.8 - 0.1 ) * 0.5 );

            // Calculate scattering
            vec3 lInScatteringVec3 = InScattering(
                lAtmospherePositionVec3,
                lLightDirectionVec3,
                lPrimaryRelativeViewPositionVec3,
                lfAtmosphereSize,
                lfHorizonFadeSpeed,
                lfAtmosphereThickness,
                false,
                false );

            lAtmosphereScattering = InScatteringPhase(
                lInScatteringVec3,
                GammaCorrectInput( vec3( 1.0, 0.5, 0.5 ) ),
                lfSunStrength,
                lfHorizonFadeSpeed,
                RayleighPhase( lLightDirectionVec3, lAtmospherePositionVec3 - lPrimaryRelativeViewPositionVec3 ) );

            vec3 lAdjustedScatteringVec3 = vec3( smoothstep( 0.1 + lfBlendTightness, 0.8 - lfBlendTightness, lAtmosphereScattering.x * lfHorizonMultiplier ) );
            lAtmosphereScattering = mix( 1.0, lAtmosphereScattering.x, lfColourFade ) * mix( lSkyColour, lHorizonColour, saturate( lAdjustedScatteringVec3 ) );

            // Fade on distant planets at the horizon
            lfHorizonPlanetFade = 1.0 - lAdjustedScatteringVec3.x;
        }

        lAtmosphereScattering = mix( lAtmosphereScattering, lHorizonColour, lfAngleTest );
    }



    // Space scattering
    vec3 lPositionScattering = vec3(0.0);

    if ( ( lfColourFade > 0.0) || (lfParamFadeMix < 1.0) )
    {        
        vec3 lTerrainPositionVec3        = normalize( lPlanetRelativePositionVec3 );
        vec3 lViewPositionVec3           = lTerrainPositionVec3 - normalize( lCameraRelativePositionVec3 ) * ( lfAtmosphereSize - 1.0 );

        vec3  lSpaceSkyColour            = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gSpaceSkyColourVec4.rgb );
        vec3  lSpaceHorizonColour        = lPlanetHorizonColour;
        float lfSpaceAtmosphereThickness = lUniforms.mpCustomPerMaterial->gSpaceScatteringParamsVec4.g;
        float lfSpaceHorizonMultiplier   = lUniforms.mpCustomPerMaterial->gSpaceScatteringParamsVec4.b;
        float lfSpaceHorizonFadeSpeed    = lUniforms.mpCustomPerMaterial->gSpaceScatteringParamsVec4.a;
        float lfSpaceSunStrength         = lUniforms.mpCustomPerMaterial->gSpaceSkyColourVec4.a;

        // Calculate scattering
        vec3 lInScatteringVec3 = InScattering(
            lTerrainPositionVec3,
            lLightDirectionVec3,
            lViewPositionVec3, 
            lfAtmosphereSize,
            lfSpaceHorizonFadeSpeed,
            lfSpaceAtmosphereThickness,
            false,
            true );

        lPositionScattering = InScatteringPhase(
            lInScatteringVec3,
            GammaCorrectInput( vec3( 1.0 ) ),
            lfSpaceSunStrength,
            lfSpaceHorizonFadeSpeed,
            RayleighPhase( lLightDirectionVec3, lTerrainPositionVec3 - lViewPositionVec3 ) );

        vec3 lAdjustedScatteringVec3 = vec3( smoothstep( 0.1, 0.8, lPositionScattering.x * lfSpaceHorizonMultiplier ) );
        lPositionScattering = mix( 1.0, lPositionScattering.x, lfColourFade ) * mix( lSpaceSkyColour, lSpaceHorizonColour, saturate( lAdjustedScatteringVec3 ) );

        // Fade on the dark side of distant planets
        lfHorizonPlanetFade = min( lfHorizonPlanetFade, max( lAdjustedScatteringVec3.x, 0.25 ) );
    }

    // Blending as you leave atmosphere
    lFragmentColourVec4.rgb = mix(saturate(lAtmosphereScattering), saturate(lPositionScattering), lfColourFade);
    lfParamFade = mix(lfHorizonPlanetFade, lfParamFade, lfParamFadeMix);

    //lFragmentColourVec4.rgb = mix( vec3( 0.0, 1.0, 0.0 ), vec3( 0.0, 0.0, 1.0 ), lfColourFade );

    // Fog values        
    vec3  lLightColour           = /*GammaCorrectInput*/( lUniforms.mpCommonPerMesh->gLightColourVec4.rgb );
    vec3  lFogColour             = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gFogColourVec4.rgb );
    vec3  lHeightFogColour       = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gHeightFogColourVec4.rgb ) * lLightColour;
    float lfFogStrength          = lUniforms.mpCustomPerMaterial->gFogParamsVec4.r;
    float lfFogOffset            = lUniforms.mpCustomPerMaterial->gFogParamsVec4.g;
    float lfFogColourStrength    = lUniforms.mpCustomPerMaterial->gFogParamsVec4.b;
    float lfFogColourOffset      = lUniforms.mpCustomPerMaterial->gFogParamsVec4.a;
    float lfSpaceFogStrength     = lUniforms.mpCustomPerMaterial->gSpaceScatteringParamsVec4.r / lfNearestPlanetRadius;
    
    // Distance
    {
        vec4 lAtmosphereFogResultVec4  = vec4( 0.0 );
        vec3  lNearPosition  = lUniforms.mpPerFrame->gViewPositionVec3 - lPrimaryPlanetPositionVec3;
        vec3  lFarPosition   = lWorldPositionVec3 - lPrimaryPlanetPositionVec3;
        float lfRayTest      = GetRayIntersectionPoint( lNearPosition, lFarPosition, lfAtmosphereSize * lfPrimaryPlanetRadius, lNearPosition, lFarPosition );
        if( lfRayTest > 0.0 )
        {
            float lfFogDistance          = length( lFarPosition - lNearPosition ); 

            float lfFogValue             = lfFogDistance * mix( lfFogStrength,  lfSpaceFogStrength, lfFogStrengthFade );
            lfFogValue                   = 1.0 / exp( lfFogOffset + lfFogValue * lfFogValue );
            lfFogValue                   = 1.0 - clamp( lfFogValue, 0.0, 1.0 );

            float lfFogColour            = lfFogDistance * lfFogColourStrength;
            lfFogColour                  = 1.0 / exp( lfFogColourOffset + lfFogColour * lfFogColour );
            lfFogColour                  = 1.0 - clamp( lfFogColour, 0.0, 1.0 );

            lAtmosphereFogResultVec4.rgb = mix( lFogColour, lFragmentColourVec4.rgb, lfFogColour );
            lAtmosphereFogResultVec4.a   = max( lFragmentColourVec4.a, lfFogValue );
        }
        
        vec4 lSpaceFogResultVec4  = vec4( 0.0 );
        if (lfParamFade > 0.0)
        {
            lfRayTest         = GetRayIntersectionPoint( lPlanetRelativeViewPositionVec3, lPlanetRelativePositionVec3, lfNearestPlanetRadius * lfAtmosphereSize, lNearPosition, lFarPosition ); 
            if( lfRayTest > 0.0 )
            {
                if( length( lWorldPositionVec3 - lNearestPlanetPosition ) <= lfNearestPlanetRadius * lfAtmosphereSize )
                {
                    float lfFogDistance     = length( lNearPosition - lFarPosition );
    
                    float lfFogValue        = lfFogDistance * lfSpaceFogStrength;
                    lfFogValue              = 1.0 / exp( 0.0 + lfFogValue * lfFogValue );
                    lfFogValue              = 1.0 - clamp( lfFogValue, 0.0, 1.0 );
    
                    lSpaceFogResultVec4.rgb = lFragmentColourVec4.rgb;
                    //lSpaceFogResultVec4.rgb = vec3( 1.0, 0.0, 0.0 );
                    lSpaceFogResultVec4.a   = max( lFragmentColourVec4.a, lfFogValue );
                }
            } 
        }            
        lFragmentColourVec4 = mix( lAtmosphereFogResultVec4, lSpaceFogResultVec4, lfParamFade );
    }

    // Height Fog
    float lfHeightFogStrength    = lUniforms.mpCustomPerMaterial->gHeightFogParamsVec4.r;
    float lfHeightFogOffset      = lUniforms.mpCustomPerMaterial->gHeightFogParamsVec4.g;
    float lfHeightFogHeight      = lUniforms.mpCustomPerMaterial->gHeightFogParamsVec4.b;
    float lfHeightFogMax         = lUniforms.mpCustomPerMaterial->gHeightFogParamsVec4.a;
    float lfHeightFogOutStrength = lUniforms.mpCustomPerMaterial->gHeightFogColourVec4.a;
    {
        vec3  lNearPosition = lUniforms.mpPerFrame->gViewPositionVec3 - lNearestPlanetPosition;
        vec3  lFarPosition  = lWorldPositionVec3 - lNearestPlanetPosition;

        float lfFogDistance = length( lFarPosition - lNearPosition );

        float lfFogValue        = lfFogDistance * lfHeightFogStrength;
        lfFogValue              = 1.0 / exp( lfHeightFogOffset + lfFogValue * lfFogValue );
        lfFogValue              = 1.0 - clamp( lfFogValue, 0.0, 1.0 );

        float lfHeightFogValue  = ( length( lFarPosition ) - ( lfNearestPlanetRadius + lfWaterHeight ) ) / ( lfHeightFogHeight + 0.0001 );
        //lfHeightFogValue        = 1.0 / exp( lfHeightFogValue * lfHeightFogValue );
        lfHeightFogValue        = 1.0 - clamp( lfHeightFogValue, 0.0, 1.0 );
        lfHeightFogValue       *= lfHeightFogMax;

        float lfHeightFogOut    = lfFogDistance * lfHeightFogOutStrength;
        lfHeightFogOut          = 1.0 / exp( lfHeightFogOffset + lfHeightFogOut * lfHeightFogOut );
        lfHeightFogOut          = 1.0 - clamp( lfHeightFogOut, 0.0, 1.0 );

        lfFogValue              = clamp( lfHeightFogValue * lfFogValue, 0.0, ( 1.0 - lfFogStrengthFade ) * lfThisIsPrimaryPlanet );

        lFragmentColourVec4.rgb = mix( lFragmentColourVec4.rgb, lHeightFogColour, clamp( lfFogValue - lfHeightFogOut, 0.0, 1.0 ) );
        lFragmentColourVec4.a   = max( lFragmentColourVec4.a, lfFogValue );

    }

    ////
    //Water Fog
    {
        vec3  lNearPosition = lUniforms.mpPerFrame->gViewPositionVec3 - lNearestPlanetPosition;
        if( length( lNearPosition ) <  (lfNearestPlanetRadius + lfWaterHeight) )
        {
            float lfWaterFade = length( lUniforms.mpPerFrame->gViewPositionVec3 - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz ) - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;
            lfWaterFade       = 1.0 - clamp( ( lfWaterFade - 2000.0 ) / 1000.0, 0.0, 1.0 );
            lFragmentColourVec4.a = 1.0 - ( lfThisIsPrimaryPlanet * lfWaterFade );
        }
    }

    // Space fog
    if( lfIsInSpace > 0 )
    {
        vec3  lSpaceWavelength1Vec3     = lUniforms.mpCustomPerMaterial->gSpaceSkyColour1Vec4.rgb;
        vec3  lSpaceWavelength2Vec3     = lUniforms.mpCustomPerMaterial->gSpaceSkyColour2Vec4.rgb;
        vec3  lSpaceWavelength3Vec3     = lUniforms.mpCustomPerMaterial->gSpaceSkyColour3Vec4.rgb;
        vec3  lSpaceFogColourVec3       = lUniforms.mpCustomPerMaterial->gSpaceFogColourVec4.rgb;
        vec3  lSpaceFogColour2Vec3      = lUniforms.mpCustomPerMaterial->gSpaceFogColour2Vec4.rgb;
        float lfSpaceFogColourDistance  = lUniforms.mpCustomPerMaterial->gSpaceFogColourVec4.a;
        float lfSpaceFogColour2Distance = lUniforms.mpCustomPerMaterial->gSpaceFogColour2Vec4.a;
        float lfSpaceFogStrength        = lUniforms.mpCustomPerMaterial->gSpaceFogParamsVec4.r;
        float lfSpaceFogClamp           = lUniforms.mpCustomPerMaterial->gSpaceFogParamsVec4.g;
        float lfSpaceSunSize            = lUniforms.mpCustomPerMaterial->gSpaceSkyColour3Vec4.a;
        float lfSpaceCenterPowerVec3    = lUniforms.mpCustomPerMaterial->gSpaceSkyColour2Vec4.a;

        if( length( lPlanetRelativePositionVec3 ) < lfNearestPlanetRadius * lfAtmosphereSize )
        {
            lfSpaceFogClamp   = lUniforms.mpCustomPerMaterial->gSpaceFogParamsVec4.b;
            lfFogStrengthFade = saturate( 1.0 - length( lFragmentColourVec4.rgb ) );
        }

        vec3 lSpaceFogColour = saturate( GetSpaceColour(
            normalize( lCameraRelativePositionVec3 ),
            vec3( 0.0 ),
            lLightDirectionVec3,
            lSpaceWavelength1Vec3,
            lSpaceWavelength2Vec3,
            lSpaceWavelength3Vec3,
            lfSpaceCenterPowerVec3 ) );

        float lfDistance    = length( lCameraRelativePositionVec3 );

        float lfFogValue             = lfDistance *  mix( lfFogStrength, lfSpaceFogStrength, lfFogStrengthFade );
        lfFogValue                   = 1.0 / exp( lfFogOffset + lfFogValue * lfFogValue );
        lfFogValue                   = clamp( 1.0 - lfFogValue, 0.0, lfSpaceFogClamp );
        lfFogValue                   *= lfFogStrengthFade * lfIsInSpace;

        float lfFogColour            = lfDistance * lfSpaceFogColourDistance;
        lfFogColour                  = 1.0 / exp( lfFogColourOffset + lfFogColour * lfFogColour );
        lfFogColour                  = 1.0 - clamp( lfFogColour, 0.0, 1.0 );
        lSpaceFogColour              = mix( lSpaceFogColourVec3, lSpaceFogColour, lfFogColour );

        lfFogColour                  = lfDistance * lfSpaceFogColour2Distance;
        lfFogColour                  = 1.0 / exp( lfFogColourOffset + lfFogColour * lfFogColour );
        lfFogColour                  = 1.0 - clamp( lfFogColour, 0.0, 1.0 );
        lSpaceFogColour              = mix( lSpaceFogColour2Vec3, lSpaceFogColour, lfFogColour );

        lFragmentColourVec4.rgb      = mix( lFragmentColourVec4.rgb, lSpaceFogColour, lfFogValue );
        lFragmentColourVec4.a        = max( lFragmentColourVec4.a, lfFogValue );
    }

    FRAGMENT_COLOUR = lFragmentColourVec4;

}


#endif

// =================================================================================================
//
// RAYMARCH
//
// =================================================================================================

#ifdef D_RAYMARCH

//-----------------------------------------------------------------------------
//      Global Data

//SAMPLER2DSHADOW( gShadowMap, 15 );


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT


    #ifdef D_SPHERE
        IN_SCREEN_POSITION
        INPUT( vec4, mPositionVec4, TEXCOORD0 )
        INPUT( vec4, mScreenSpacePositionVec4, TEXCOORD4 )
    #else
        IN_SCREEN_POSITION
        INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
    #endif

DECLARE_END

//-----------------------------------------------------------------------------
//      Functions 

#define NB_STEPS       16
#define PI  3.1415926535897932384626433832795 

#define TAU    0.0001
#define PHI    10000000.0
// 1.0 / PI
#define PI_RCP 0.31830988618379067153776752674503

/*
float
ComputeFallOff(
    in float lfDistance,
    in float lfDistanceRecip )
{
    float lfFallOff;

    lfFallOff = TAU * ( ( PHI * 0.25 * PI_RCP ) * lfDistanceRecip * lfDistanceRecip ) * exp( -lfDistance * TAU ) * exp( -1.0 * TAU );

    return lfFallOff;
}
*/

#define G_SCATTERING 0.55

// Mie scaterring approximated with Henyey-Greenstein phase function.
float
ComputeScattering(
    float lightDotView )
{
    float result = 1.0f - G_SCATTERING;
    result *= result;
    result /= ( 4.0f * PI * pow( 1.0f + G_SCATTERING * G_SCATTERING - ( 2.0f * G_SCATTERING ) * lightDotView, 1.5f ) );
    return result;
}

STATIC_CONST mat4 kaDitherMatrix = mat4(
    0.0, 0.5, 0.125, 0.625,
    0.75, 0.22, 0.875, 0.375,
    0.1875, 0.6875, 0.0625, 0.5625,
    0.9375, 0.4375, 0.8125, 0.3125 );

STATIC_CONST float kfMaxRayMarchDistance = 100.0;


FRAGMENT_MAIN_COLOUR_SRT
{
    vec3  lStartPositionVec3;
    vec3  lRayDirectionVec3;
    float lfRayLength;
    vec2 lFragCoordsVec2;
    vec2 screenPixel;
    float lfDepth ;

    #ifdef D_SPHERE
    {
        lFragCoordsVec2 = ( IN( mScreenSpacePositionVec4 ).xy / IN( mScreenSpacePositionVec4 ).w ) * 0.5 + 0.5;

        vec3 lSphereCenter = lUniforms.mpPerFrame->gLightPositionVec4.xyz;
        vec3 lRayEnd       = IN( mPositionVec4 ).xyz; // We're using front face culling

        lRayDirectionVec3       = normalize( lRayEnd - lUniforms.mpPerFrame->gViewPositionVec3 );

        // Chord to a sphere function
        lfRayLength          = dot( lSphereCenter - lRayEnd, -lRayDirectionVec3 ) * 2.0;
        lStartPositionVec3   = lRayEnd - ( lRayDirectionVec3 * lfRayLength );

        // Clamp to world pos
        {
            vec3 lRayEndViewSpace = lRayEnd - lUniforms.mpPerFrame->gViewPositionVec3;


            float lfDepth          = DenormaliseDepth( lUniforms.mpPerFrame->gClipPlanesVec4, DecodeDepthFromColour( texture2D( lUniforms.mpCustomPerMaterial->gBufferMap, lFragCoordsVec2 ) ) );
            vec3 lWorldPosition    = RecreatePositionFromDepth( lfDepth, lFragCoordsVec2, lUniforms.mpPerFrame->gViewPositionVec3, lUniforms.mpCommonPerMesh->gInverseProjectionMat4, lUniforms.mpCommonPerMesh->gInverseViewMat4 );

            // Deferred Pos is in view space
            //vec3 lWorldPosition = texture2D( lUniforms.mpCustomPerMaterial->gBuffer2Map, lFragCoordsVec2 ).xyz;

            if ( length( lWorldPosition ) < length( lRayEndViewSpace ) )
            {
                lfRayLength = length( ( lWorldPosition + lUniforms.mpPerFrame->gViewPositionVec3 ) - lStartPositionVec3 );
            }
        }
    }
    #else
    {
        lFragCoordsVec2 = IN( mTexCoordsVec2 );

        vec3  rayVector;
        lfDepth                = DenormaliseDepth( lUniforms.mpPerFrame->gClipPlanesVec4, DecodeDepthFromColour( texture2D( lUniforms.mpCustomPerMaterial->gBufferMap, lFragCoordsVec2 ) ) );
        vec3 lWorldPosition    = RecreatePositionFromDepth( lfDepth, lFragCoordsVec2, vec3( 0.0 ), lUniforms.mpCommonPerMesh->gInverseProjectionMat4, lUniforms.mpCommonPerMesh->gInverseViewMat4 );
        rayVector              = lWorldPosition;// - lUniforms.mpPerFrame->gViewPositionVec3;

        lStartPositionVec3  = lUniforms.mpPerFrame->gViewPositionVec3;

        lfRayLength      = length( rayVector );

        // Image Stabilisation
        //rayLength      = trunc( min( rayLength, kfMaxRayMarchDistance ) * 10.0 ) * 0.1;
        //rayLength      = min( rayLength, kfMaxRayMarchDistance );

        lRayDirectionVec3   = rayVector / lfRayLength;
    }
    #endif

    float lfStepLength        = lfRayLength / float( NB_STEPS );
    vec3 lRayStepVec3         = lRayDirectionVec3 * lfStepLength;
    vec3 lCurrentPositionVec3 = lStartPositionVec3;

        float ditherValue;
    {
        // Replace with a dither texture
        screenPixel = lFragCoordsVec2 * vec2( 1920, 1080 ) * 0.5;
        vec2 modPixel     = mod( screenPixel, 4.0 );

#if defined( D_PLATFORM_ORBIS )
        //
        // it seems like on PS4 we can't access an array/matrix that has been defined in the code
        // possible fixes: upload the matrix as a uniform (per frame/stage uniform) or as a texture
        // for the moment we will just live with banding artifacts on PS4
        //
        ditherValue = modPixel.x * 0.25; 
#else
        ditherValue = kaDitherMatrix[int(modPixel.x)][int(modPixel.y)];
#endif

        // Offset the start position.
        lCurrentPositionVec3 += ( lRayStepVec3 ) * ditherValue;
    }


    float lfLightAccumulation = 0.0;
    

    #ifndef D_SPHERE
    //{
        float lfSunScatter;

        lfSunScatter = ComputeScattering( dot( lRayDirectionVec3, -normalize( lUniforms.mpPerFrame->gLightDirectionVec4.xyz ) ) );
    //}
    #endif

    lCurrentPositionVec3 += lRayStepVec3;

    for ( int i = 0; i < NB_STEPS - 2; i++ )
    {
        #ifdef D_SPHERE
        {
            vec3  lPosToLight       = lUniforms.mpPerFrame->gLightPositionVec4.xyz - lCurrentPositionVec3;
            float lfDistanceSquared = dot( lPosToLight, lPosToLight );
 
            // Quadratic Distance attenuation
            float lfAttenuation = 1.0 / max( 1.0, lfDistanceSquared );
 
            if ( lfAttenuation > 0.1 )
            {
                lfLightAccumulation += lfAttenuation;
            }
        }
        #else
        {
            float shadowMapValue = ComputeShadowIntensity( DEREF_PTR( lUniforms.mpCustomPerMaterial ),  DEREF_PTR( lUniforms.mpPerFrame ), DEREF_PTR( lUniforms.mpCommonPerMesh ), lCurrentPositionVec3, vec3(0.0), lFragCoordsVec2, true );
 
            lfLightAccumulation += lfSunScatter * (shadowMapValue );
        }
        #endif
 
        //lfFog *= Map( currentPosition );
 
        lCurrentPositionVec3 += lRayStepVec3;
    }

    lfLightAccumulation /= float(NB_STEPS - 2);
    lfLightAccumulation  = clamp( lfLightAccumulation, 0.0, 1.0 );
    
    const float lfBoost = 1.5;
    FRAGMENT_COLOUR = vec4( lUniforms.mpCommonPerMesh->gLightColourVec4.rgb * lfLightAccumulation * lUniforms.mpCommonPerMesh->gLightColourVec4.w, lfLightAccumulation * lUniforms.mpCommonPerMesh->gLightColourVec4.w * lfBoost );
    //FRAGMENT_COLOUR = vec4( normalize( lCurrentPositionVec3 - lUniforms.mpPerFrame->gViewPositionVec3 ) * 0.5 + 0.5, 1.0 );//lfLightAccumulation );
    //FRAGMENT_COLOUR = vec4( lfLightAccumulation, 0.0, 0.0, 1.0 );//lfLightAccumulation * lUniforms.mpCommonPerMesh->gLightColourVec4.w * lfBoost );

    //FRAGMENT_COLOUR = GetDepthColour( lfDepth );
    //FRAGMENT_COLOUR = vec4( lfLightAccumulation * vec3(2.0,0.0,0.0) * lUniforms.mpCommonPerMesh->gLightColourVec4.w, 1.0 );

}

#endif
