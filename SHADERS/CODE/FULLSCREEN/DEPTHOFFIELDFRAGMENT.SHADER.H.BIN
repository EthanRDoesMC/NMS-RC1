////////////////////////////////////////////////////////////////////////////////
///
///     @file       DoFFragment.h
///     @author     User
///     @date       
///
///     @brief      DepthOfFieldFragmentShader
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 


//-----------------------------------------------------------------------------
//      Include files

#include "Common/Defines.shader.h"
#include "Common/CommonUniforms.shader.h"
#include "Common/Common.shader.h"
#include "Common/CommonDepth.shader.h"
#include "Common/CommonPostProcess.shader.h"

#include "Fullscreen/PostCommon.h"

// =================================================================================================

#if defined( D_GUASS_BLUR_RADIUS_4 )
#define D_GUASS_BLUR_RADIUS 4
#elif defined( D_GUASS_BLUR_RADIUS_3 )
#define D_GUASS_BLUR_RADIUS 3
#elif defined( D_GUASS_BLUR_RADIUS_2 )
#define D_GUASS_BLUR_RADIUS 2
#endif


// =================================================================================================
//
// TONEMAP_COPY
//
// =================================================================================================

#ifdef D_DEPTHOFFIELD_TONEMAP_DEPTH

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

FRAGMENT_MAIN_COLOUR_SRT
{
    vec4 lFragmentColourVec4    = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2) );
    vec4 lDofParamsVec4         = lUniforms.mpCustomPerMesh->gDoFParamsVec4;
    

    lFragmentColourVec4.xyz     = TonemapKodak(lFragmentColourVec4.rgb) / TonemapKodak( vec3(1.0,1.0,1.0) );
    lFragmentColourVec4.xyz     = GammaCorrectOutput( lFragmentColourVec4.xyz );
    float lfPower = 0.0;
    if (lDofParamsVec4.x != 0.0) // DOF amount
    {
	    vec4 lBuffer1ColourVec4     = texture2D( lUniforms.mpCustomPerMesh->gBuffer1Map, IN(mTexCoordsVec2) );
	    //FRAGMENT_DEPTH              = lBuffer1ColourVec4.x;
	
	    vec3 lDofBlurCol;
	
	    float lfNonLinearZ          = lBuffer1ColourVec4.x;
	    float lfLinearZ             = LogToLinearDepth( lUniforms.mpPerFrame->gClipPlanesRVec4, lfNonLinearZ );
	
	    vec2 lDistMaskedVec2;
	
	    float lfNearPlane           = 0.0;//gCommon.gDoFParamsVec4.y;
	    lDistMaskedVec2.x           = smoothstep( lfNearPlane, lfNearPlane - lDofParamsVec4.z, lfLinearZ ); // in this case edge0 > edge1 - glsl spec says this gives undefined behaviour... is this line correct?
	    lDistMaskedVec2.y           = smoothstep( lDofParamsVec4.y, lDofParamsVec4.y + lDofParamsVec4.w, lfLinearZ );
	
		lfPower                     = max( lDistMaskedVec2.x, lDistMaskedVec2.y );
	    
	    //// Blur Mask
	    vec2 lDeformedCoordsVec2    = GetBulgeDeform( IN(mTexCoordsVec2) );
	    vec4 lBlurMaskVec4Warped    = texture2D( lUniforms.mpCustomPerMesh->gBlurMask, lDeformedCoordsVec2 );// texture2D( gBlurMask, lDeformedCoordsVec2 );
		vec4 lBlurMaskVec4          = texture2D( lUniforms.mpCustomPerMesh->gBlurMask, IN(mTexCoordsVec2) );
	    lfPower                     = mix( 0.0, lfPower, lDofParamsVec4.x );
	    lfPower                     = mix( lfPower, 1.0, max(lBlurMaskVec4Warped.r, lBlurMaskVec4.g) );
	}
    
    FRAGMENT_COLOUR             = vec4( lFragmentColourVec4.xyz, lfPower );

    //FRAGMENT_COLOUR             = vec4( 1.0, 0.0, 0.0,  1.0 );
}

#endif


// =================================================================================================
//
// BLEND
//
// =================================================================================================

#ifdef D_DEPTHOFFIELD_BLEND

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
IN_SCREEN_POSITION

INPUT(vec2, mTexCoordsVec2, TEXCOORD0)
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

FRAGMENT_MAIN_COLOUR_SRT
{
    vec4 lFragmentColourVec4 = texture2D(lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2));
    if (lFragmentColourVec4.a == 0.0)
    {
        discard;
    }
    FRAGMENT_COLOUR = lFragmentColourVec4;
}

#endif


// =================================================================================================
//
// GUASS_DEPTH
//
// =================================================================================================

#ifdef D_DEPTHOFFIELD_GUASS_DEPTH

#ifdef D_PLATFORM_ORBIS
//#pragma argument(unrollallloops)
#endif


//-----------------------------------------------------------------------------
//      Global Data


//blur params x = bool x-axis, y = bool y-axis, z = Sigma
// The sigma value for the gaussian function: higher value means more blur
// A good value for 9x9 is around 3 to 5
// A good value for 7x7 is around 2.5 to 4
// A good value for 5x5 is around 2 to 3.5
// ... play around with this based on what you need :)


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 
STATIC_CONST float pi = 3.14159265;


FRAGMENT_MAIN_COLOUR_SRT
{    
    vec3   incrementalGaussian; // Incremental Gaussian Coefficent Calculation (See GPU Gems 3 pp. 877 - 889)
    vec4   avgValue = vec4(0.0, 0.0, 0.0, 0.0);
    vec4   lCenter;
    float coefficientSum = 0.0;
    float sigma;


    lCenter =  texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2) );
   
    if ( lCenter.w == 0.0 )
    {
#if defined ( D_GUASS_BLUR_DISCARD )
		discard;
#else		    	
        FRAGMENT_COLOUR = lCenter;
        return;
#endif              
    }
    
    vec4 lBlurParamsVec4 = lUniforms.mpCustomPerMesh->gBlurParamsVec4;

    // The sigma value for the gaussian function: higher value means more blur
    // A good value for 9x9 is around 3 to 5
    // A good value for 7x7 is around 2.5 to 4
    // A good value for 5x5 is around 2 to 3.5
    // ... play around with this based on what you need :)
    sigma = lBlurParamsVec4.z * lCenter.w * lUniforms.mpCustomPerMesh->gHDRParamsVec4.w;

    incrementalGaussian.x = 1.0 / (sqrt(2.0 * 3.14159265) * sigma);
    incrementalGaussian.y = exp(-0.5 / (sigma * sigma));
    incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;

    // Take the central sample first...
    avgValue.xyz            = lCenter.xyz * incrementalGaussian.x;
    coefficientSum         += incrementalGaussian.x;
    incrementalGaussian.xy *= incrementalGaussian.yz;
    
    // Go through the remaining 8 vertical samples (4 on each side of the center)
    for (float i = 1.0; i <= 8 ; i++) 
    {
        vec4 lTexPos;
        vec4 lTexNeg;

        lTexPos = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2).xy + i * (lBlurParamsVec4.xy * lUniforms.mpPerFrame->gFrameBufferSizeVec4.zw) );
        lTexNeg = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2).xy - i * (lBlurParamsVec4.xy * lUniforms.mpPerFrame->gFrameBufferSizeVec4.zw) );
        
        
        avgValue.xyz += mix( lCenter.xyz, lTexNeg.xyz, lTexNeg.w ) * incrementalGaussian.x;         
        avgValue.xyz += mix( lCenter.xyz, lTexPos.xyz, lTexPos.w ) * incrementalGaussian.x; 
        
        
      //  avgValue.xyz += lTexNeg.xyz * incrementalGaussian.x;         
      //  avgValue.xyz += lTexPos.xyz * incrementalGaussian.x;
               
        coefficientSum         += 2.0 * incrementalGaussian.x;
        incrementalGaussian.xy *= incrementalGaussian.yz;
    }

    FRAGMENT_COLOUR = vec4( avgValue.xyz / coefficientSum, lCenter.w );
    //FRAGMENT_COLOUR = vec4( lCenter.xyz, lCenter.w );   
}

#endif
