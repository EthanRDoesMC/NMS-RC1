////////////////////////////////////////////////////////////////////////////////
///
///     @file       PostProcessFragment.h
///     @author     User
///     @date       
///
///     @brief      PostProcessFragment
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 

#ifndef D_COMMONPOSTPROCESS_H
#define D_COMMONPOSTPROCESS_H

#include "Common/Defines.shader.h"

//-----------------------------------------------------------------------------
//      Include files


//----------------------------------------------------------------------------- 
//      Global Data

STATIC_CONST float kfAvgLumR           = 0.5;
STATIC_CONST float kfAvgLumG           = 0.5;
STATIC_CONST float kfAvgLumB           = 0.5;
STATIC_CONST vec3  lLumCoefficientVec3 = vec3( 0.2125, 0.7154, 0.0721 );

//-----------------------------------------------------------------------------
//    Functions


/*
float A = 0.15;
float B = 0.50;
float C = 0.10;
float D = 0.10;
float E = 0.02;
float F = 0.60;
float W = 32.0;
*/
/*
STATIC_CONST float A = 0.22;
STATIC_CONST float B = 0.30;
STATIC_CONST float C = 0.10;
STATIC_CONST float D = 0.20;
STATIC_CONST float E = 0.01;
STATIC_CONST float F = 0.30;
STATIC_CONST float W = 11.2;
*/

vec3 
TonemapKodak(
    in vec3 x )
{
    //return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
    return (( x * ( 0.22 * x + 0.10 * 0.30 ) + 0.20 * 0.01 ) / ( x * ( 0.22 * x + 0.30 ) + 0.20 * 0.30 ) ) - 0.01 / 0.30 ;
}

vec3 
TonemapUDK(
    in vec3 x )
{
    return x / (x + 0.187) * 1.035;;
}

vec3 
TonemapExposure(
    in vec3   lInputVec3,
    in float  lfExposure,
    in float  lfThreshold,
    in float  lfOffset  )
{
    vec3 lResultVec3;

    lResultVec3  = 1.0 - exp2( -lfExposure * lInputVec3.xyz );
    lResultVec3  = max( lResultVec3 - lfThreshold, 0.0 );
    lResultVec3 /= lfOffset + lResultVec3;

    return lResultVec3;
}



//-----------------------------------------------------------------------------
///
///     GetTex2DBilinear
///
///     @brief      GetTex2DBilinear
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
vec4 
GetTex2DBilinear( 
    SAMPLER2DARG( lTextureMap ), 
    in vec2       lTexCoordsVec2, 
    in vec2       lTexSizeVec2 )
{
	// Bilinear filtering function. Useful when hardware filtering is not available, e.g. for
	// floating point textures on ATI 1xx0 cards
	
	vec2 lCoord0Vec2 = lTexCoordsVec2 - 0.5 / lTexSizeVec2;
	vec2 lCoord1Vec2 = lTexCoordsVec2 + 0.5 / lTexSizeVec2;
	vec2 lWeightVec2 = fract( lCoord0Vec2 * lTexSizeVec2 );
	
	vec4 lBottomVec4 = mix( texture2D( lTextureMap, lCoord0Vec2 ),
					texture2D( lTextureMap, vec2( lCoord1Vec2.x, lCoord0Vec2.y ) ),
					lWeightVec2.x );

	vec4 lTopVec4 = mix( texture2D( lTextureMap, vec2( lCoord0Vec2.x, lCoord1Vec2.y ) ),
					texture2D( lTextureMap, lCoord1Vec2 ),
					lWeightVec2.x );
	
	return mix( lBottomVec4, lTopVec4, lWeightVec2.y );
}

//-----------------------------------------------------------------------------
///
///     BlurKawase
///
///     @brief      BlurKawase
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
vec4 
BlurKawase( 
    SAMPLER2DARG( lTextureMap ), 
    in vec2       lTexCoordsVec2, 
    in vec2       lRecipTexSizeVec2, 
    in float      lfIteration )
{
    // Function assumes that tex is using bilinear hardware filtering
	vec2 lUVVec2 = (lfIteration + 0.5) * lRecipTexSizeVec2;
	
	vec4 lColourVec4 = texture2D( lTextureMap, lTexCoordsVec2 + vec2( -lUVVec2.x, lUVVec2.y ) );	// Top left
	lColourVec4 +=	   texture2D( lTextureMap, lTexCoordsVec2 + lUVVec2 );							// Top right
	lColourVec4 +=	   texture2D( lTextureMap, lTexCoordsVec2 + vec2( lUVVec2.x, -lUVVec2.y ) );	// Bottom right
	lColourVec4 +=     texture2D( lTextureMap, lTexCoordsVec2 - lUVVec2 );							// Bottom left
	
	return lColourVec4 * 0.25;
}
/*
//-----------------------------------------------------------------------------
///
///     RGBToHSL
///
///     @brief      RGBToHSL
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
vec3 
RGBToHSL(
    vec3 lColourVec3 )
{
	vec3 lHSLVec3 = vec3( 0.0, 0.0, 0.0 ); // init to 0 to avoid warnings ? (and reverse if + remove first part)
	
	float lfMin = min(min(lColourVec3.r, lColourVec3.g), lColourVec3.b);    //Min. value of RGB
	float lfMax = max(max(lColourVec3.r, lColourVec3.g), lColourVec3.b);    //Max. value of RGB
	float lfDelta = lfMax - lfMin;             //Delta RGB value

	lHSLVec3.z = (lfMax + lfMin) / 2.0; // Luminance

	if (lfDelta == 0.0)		//This is a gray, no chroma...
	{
		lHSLVec3.x = 0.0;	// Hue
		lHSLVec3.y = 0.0;	// Saturation
	}
	else                                    //Chromatic data...
	{
		if (lHSLVec3.z < 0.5)
			lHSLVec3.y = lfDelta / (lfMax + lfMin); // Saturation
		else
			lHSLVec3.y = lfDelta / (2.0 - lfMax - lfMin); // Saturation
		
		float lfDeltaR = (((lfMax - lColourVec3.r) / 6.0) + (lfDelta / 2.0)) / lfDelta;
		float lfDeltaG = (((lfMax - lColourVec3.g) / 6.0) + (lfDelta / 2.0)) / lfDelta;
		float lfDeltaB = (((lfMax - lColourVec3.b) / 6.0) + (lfDelta / 2.0)) / lfDelta;

		if (lColourVec3.r == lfMax )
			lHSLVec3.x = lfDeltaB - lfDeltaG; // Hue
		else if (lColourVec3.g == lfMax)
			lHSLVec3.x = (1.0 / 3.0) + lfDeltaR - lfDeltaB; // Hue
		else if (lColourVec3.b == lfMax)
			lHSLVec3.x = (2.0 / 3.0) + lfDeltaG - lfDeltaR; // Hue

		if (lHSLVec3.x < 0.0)
			lHSLVec3.x += 1.0; // Hue
		else if (lHSLVec3.x > 1.0)
			lHSLVec3.x -= 1.0; // Hue
	}

	return lHSLVec3;
}

//-----------------------------------------------------------------------------
///
///     HueToRGB
///
///     @brief      HueToRGB
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
float 
HueToRGB(
    float lf1, 
    float lf2, 
    float lfHue)
{
	if (lfHue < 0.0)
		lfHue += 1.0;
	else if (lfHue > 1.0)
		lfHue -= 1.0;
	float res;
	if ((6.0 * lfHue) < 1.0)
		res = lf1 + (lf2 - lf1) * 6.0 * lfHue;
	else if ((2.0 * lfHue) < 1.0)
		res = lf2;
	else if ((3.0 * lfHue) < 2.0)
		res = lf1 + (lf2 - lf1) * ((2.0 / 3.0) - lfHue) * 6.0;
	else
		res = lf1;
	return res;
}

//-----------------------------------------------------------------------------
///
///     HSLToRGB
///
///     @brief      HSLToRGB
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
vec3 
HSLToRGB(
    vec3 lHSLVec3 )
{
	vec3 lRGBVec3;
	
	if (lHSLVec3.y == 0.0)
		lRGBVec3 = vec3(lHSLVec3.z, lHSLVec3.z, lHSLVec3.z); // Luminance
	else
	{
		float lf2;
		
		if (lHSLVec3.z < 0.5)
			lf2 = lHSLVec3.z * (1.0 + lHSLVec3.y);
		else
			lf2 = (lHSLVec3.z + lHSLVec3.y) - (lHSLVec3.y * lHSLVec3.z);
			
		float lf1 = 2.0 * lHSLVec3.z - lf2;
		
		lRGBVec3.r = HueToRGB(lf1, lf2, lHSLVec3.x + (1.0/3.0));
		lRGBVec3.g = HueToRGB(lf1, lf2, lHSLVec3.x);
		lRGBVec3.b= HueToRGB(lf1, lf2, lHSLVec3.x - (1.0/3.0));
	}
	
	return lRGBVec3;
}

//-----------------------------------------------------------------------------
///
///     ContrastSaturationBrightness
///
///     @brief      ContrastSaturationBrightness
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
// For all settings: 1.0 = 100% 0.5=50% 1.5 = 150%
vec3 
ContrastSaturationBrightness(
    vec3   lColourVec3, 
    float lfBRT, 
    float lfSaturation, 
    float lfCon )
{
    float              lfDot;

    // Increase or decrease these values to adjust r, g and b color channels separately
    vec3 lAverageLuminosityVec3 = vec3(kfAvgLumR, kfAvgLumG, kfAvgLumB);

	vec3 lBRTColourVec3 = lColourVec3 * lfBRT;

    lfDot = dot(lBRTColourVec3, lLumCoefficientVec3);
	vec3 lIntensityVec3 = vec3( lfDot, lfDot, lfDot );
	vec3 lSaturationColourVec3 = mix(lIntensityVec3, lBRTColourVec3, lfSaturation);
	vec3 lConColorVec3 = mix(lAverageLuminosityVec3, lSaturationColourVec3, lfCon);
	return lConColorVec3;

}*/

//-----------------------------------------------------------------------------
///
///     GetBulgeDeform
///
///     @brief      GetBulgeDeform
///
///     @param      vec2 lCoordsVec2
///     @return     vec2
///
//-----------------------------------------------------------------------------
vec2 
GetBulgeDeform(
    vec2 lCoordsVec2 )
{
    // get the right pixel for the current position
    vec2 lBulgeCoordsVec2;

    // put into -1 -> 1 space
    lBulgeCoordsVec2   = lCoordsVec2*2.0 - 1.0;

    lBulgeCoordsVec2.y = lBulgeCoordsVec2.y * mix( 1.0, 1.1, sin(0.5*3.1416*(lBulgeCoordsVec2.x+1.0)) );
    lBulgeCoordsVec2.y -= 0.03;

    // put back into 0 -> 1 space
    lBulgeCoordsVec2 = (lBulgeCoordsVec2 + 1.0)*0.5;

    return lBulgeCoordsVec2;
}

#endif