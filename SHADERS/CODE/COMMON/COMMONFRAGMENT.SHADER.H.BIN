////////////////////////////////////////////////////////////////////////////////
///
///     @file       CommonFragment.h
///     @author     User
///     @date       
///
///     @brief      CommonFogShader
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 

#ifndef D_COMMONFRAGMENT_H
#define D_COMMONFRAGMENT_H

#include "Common/Defines.shader.h"

//-----------------------------------------------------------------------------
//      Include files

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
///
///     CalculateFadeValue
///
///     @brief      Hash
///
///     @param      vec2 lPositionVec2 
///     @return     float
///
//-----------------------------------------------------------------------------
vec3 
DecodeNormalMap( 
    vec4 lNormalTexVec4 )
{
    lNormalTexVec4 = (lNormalTexVec4 * 2.0) - 1.0;

    return normalize( vec3( lNormalTexVec4.a, lNormalTexVec4.g, (1.0 - lNormalTexVec4.a*lNormalTexVec4.a ) * ( 1.0 - lNormalTexVec4.g*lNormalTexVec4.g ) ) );
}


//-----------------------------------------------------------------------------
///
///     ReadDualParaboloidMap
///
///     @brief      ReadDualParaboloidMap
///
///     @param      lBackMap 
///     @param      lFrontMap 
///     @param      in vec3 lReflectionVec3
///     @return     vec3
///
//-----------------------------------------------------------------------------
vec3
ReadDualParaboloidMap(
    SAMPLER2DARG( lBackMap ),
    SAMPLER2DARG( lFrontMap ),
    in vec3 lReflectionVec3,
    in int  liMipLevel )
{
    vec2 lEnvCoordsVec2;
    lEnvCoordsVec2.xy = lReflectionVec3.xy / ( 1.0 + abs(lReflectionVec3.z) );
    lEnvCoordsVec2.x =  0.5 * lEnvCoordsVec2.x + 0.5; //bias and scale to correctly sample a d3d texture
    lEnvCoordsVec2.y = -0.5 * lEnvCoordsVec2.y + 0.5;
#if defined( D_PLATFORM_ORBIS )
    //lEnvCoordsVec2.y = 1.0 - lFrontCoordsVec2.y;    
#endif
    // Potentially use clever math, and write them both to one image, ala Cascading Shadow Map
    float lInEq = ( -lReflectionVec3.z + 1.0 );
    float isBack = ( lReflectionVec3.x > -lInEq && lReflectionVec3.x < lInEq) && 
                   ( lReflectionVec3.y > -lInEq && lReflectionVec3.y < lInEq) ? 1.0 : 0.0;
    vec3 lEnvironmentMapBackVec3 = texture2DLod( lBackMap, lEnvCoordsVec2, float( liMipLevel ) ).xyz;   // sample the front paraboloid map
    vec3 lEnvironmentMapFrontVec3 = texture2DLod( lFrontMap, lEnvCoordsVec2, float( liMipLevel ) ).xyz; // sample the back paraboloid map    
    return lEnvironmentMapBackVec3 * isBack + lEnvironmentMapFrontVec3 * (1.0 - isBack);          
}

//-----------------------------------------------------------------------------
///
///     GetUpperValue
///
///
//-----------------------------------------------------------------------------
float 
GetUpperValue( 
    float lValue )
{
    int a = int( lValue * 255 );
    return ( float(a >> 4) / 16.0 );
}

//-----------------------------------------------------------------------------
///
///     GetLowerValue
///
///
//-----------------------------------------------------------------------------
float 
GetLowerValue( 
    float lValue )
{
    int a = int( lValue * 255 );
    float lReturn = float( a & 0xf ) / 16.0;
    lReturn = clamp( lReturn - GetUpperValue( lValue ), 0.0, 1.0 );
    return lReturn;
}

#endif