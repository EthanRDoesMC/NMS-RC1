////////////////////////////////////////////////////////////////////////////////
///
///     @file       UberFragmentShader.h
///     @author     User
///     @date       
///
///     @brief      UberFragmentShader
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////


//-----------------------------------------------------------------------------
//      Compilation defines 


#ifdef _F20_PARALLAXMAP
    #define _F03_NORMALMAP
#endif

#if defined( _F25_ROUGHNESS_MASK ) || defined( _F41_DETAIL_DIFFUSE ) || defined( _F42_DETAIL_NORMAL ) || defined( _F24_AOMAP ) || defined( _F40_SUBSURFACE_MASK )
    #define D_MASKS
#endif


#if defined( _F01_DIFFUSEMAP ) || defined( _F03_NORMALMAP ) || defined( D_IMPOSTERMASKS ) || defined(D_MASKS)
    #define D_TEXCOORDS
#endif

#define D_USES_WORLD_POSITION

#ifndef _F03_NORMALMAP
    #if defined( _F04_ENVMAP ) || !defined( _F07_UNLIT )
        #define D_USES_VERTEX_NORMAL
    #endif
#endif

#if defined( _F33_GRASS ) || defined( _F32_LEAF )  
    #define D_USES_VERTEX_NORMAL
#endif

#define D_FADE

#if defined( _F42_DETAIL_NORMAL ) || defined( _F41_DETAIL_DIFFUSE )
    #define D_DETAIL
#endif

#if defined( _F02_SKINNED ) 
    #define D_SKINNING_UNIFORMS
#endif

#if !defined( D_DEFER ) || defined( D_DEFERRED_DECAL ) 
    #define D_USE_SCREEN_POSITION
#endif



//-----------------------------------------------------------------------------
//      Include files

#include "Common/Defines.shader.h"
#include "Common/CommonUniforms.shader.h"

#include "UberCommon.h"

#include "Common/Noise3d.glsl"
#include "Common/Common.shader.h"
#include "Common/CommonFragment.shader.h"
#include "Common/CommonDepth.shader.h"
#include "Common/CommonLighting.shader.h"
#include "Common/CommonPlanet.shader.h"

#ifdef D_FADE
    #include "Common/CommonFade.shader.h"
#endif



//-----------------------------------------------------------------------------
//      Global Data

//
//-----------------------------------------------------------------------------
//      Typedefs and Classes 

//-----------------------------------------------------------------------------
///
///     Input
///
///     @brief  Input
///
//-----------------------------------------------------------------------------
DECLARE_INPUT

    IN_SCREEN_POSITION

    INPUT( vec4, mTexCoordsVec4,            TEXCOORD0 )

#ifdef _F21_VERTEXCOLOUR
    INPUT( vec4, mColourVec4,               TEXCOORD1 )
#endif

#ifdef _F30_REFRACTION_MAP
    INPUT( vec4, mProjectedTexCoordsVec4,   TEXCOORD2 )
#endif

//#ifdef D_USES_WORLD_POSITION
#if defined( D_DEPTHONLY )
    INPUT_NOINTERP( vec4, mWorldPositionVec3_mfFadeValueForInstance,        TEXCOORD3 )
#else
    INPUT( vec4, mWorldPositionVec3_mfFadeValueForInstance,        TEXCOORD3 )
#endif
//#endif

#if !defined( _F01_DIFFUSEMAP ) || defined( _F22_TRANSPARENT_SCALAR )
    INPUT( vec4,   mMaterialVec4,           TEXCOORD4 )
#endif

#if defined( _F47_WRITE_LOG_Z )
    INPUT( float, mfLogZ,                   TEXCOORD5 )
#endif

#if !defined( D_DEPTHONLY )

#ifdef D_USES_VERTEX_NORMAL
    INPUT( vec3, mTangentSpaceNormalVec3,   TEXCOORD6 )
#endif

#ifdef _F20_PARALLAXMAP
    INPUT( vec3, mTangentSpaceEyeVec3,      TEXCOORD7 )
#endif

#if defined( _F03_NORMALMAP )  || defined( _F42_DETAIL_NORMAL )
    INPUT( vec3,   mTangentMatRow1Vec3,     TEXCOORD18 )
    INPUT( vec3,   mTangentMatRow2Vec3,     TEXCOORD19 )
    INPUT( vec3,   mTangentMatRow3Vec3,     TEXCOORD20 )
#endif


#if defined( _F32_LEAF ) || defined( _F33_GRASS )
    INPUT( vec3, mCenteralNormalVec3,		TEXCOORD14 )
    INPUT( vec3, mCenterPositionVec3,       TEXCOORD16 )
#endif

#ifdef D_USE_SCREEN_POSITION
    INPUT( vec4, mScreenSpacePositionVec4,  TEXCOORD15 )
#endif
    
#endif



#ifdef _F37_RECOLOUR
    INPUT( vec4,   mPaletteColour1Vec4,     TEXCOORD16 )
    INPUT( vec4,   mPaletteColour2Vec4,     TEXCOORD17 )
#endif

DECLARE_END

#ifdef D_DEFER
#include "OutputDeferred.shader.h"
#else
#include "OutputForward.shader.h"
#endif

#ifdef _F11_ALPHACUTOUT
    STATIC_CONST float kfAlphaThreshold    = 0.45;
    STATIC_CONST float kfAlphaThresholdMax = 0.8;
#else
    STATIC_CONST float kfAlphaThreshold    = 0.0001;
#endif

//-----------------------------------------------------------------------------
//    Functions

vec2
GetDecalTexCoords(
    PerFrameUniforms            lPerFrameUniforms,
    CommonPerMeshUniforms       lPerMeshUniforms,
    SAMPLER2DARG(               lTexture ),
    in vec4                     lScreenSpacePositionVec4,
    out vec3                    lWorldPositionVec3 )
{
    vec3 lTexCoords;    
    vec2 lGBufferCoords = ( lScreenSpacePositionVec4.xy / lScreenSpacePositionVec4.w ) * 0.5 + 0.5;

#ifdef D_PLATFORM_ORBIS
    lGBufferCoords.y = 1.0 - lGBufferCoords.y;
#endif

    // Deferred Pos is in view space
    float lfDepth      = FastDenormaliseDepth( lPerFrameUniforms.gClipPlanesVec4, DecodeDepthFromColour( texture2D( lTexture, lGBufferCoords ) ) );
    lWorldPositionVec3 = RecreatePositionFromDepth( lfDepth, lGBufferCoords, lPerFrameUniforms.gViewPositionVec3, lPerMeshUniforms.gInverseProjectionMat4, lPerMeshUniforms.gInverseViewMat4 );
    
    vec3  lObjectSpaceVec3   = MUL( lPerMeshUniforms.gInverseModelMat4, vec4( lWorldPositionVec3, 1.0 ) ).xyz;
    //vec3  lObjectSpaceVec3   = MUL( inverse( lPerMeshUniforms.gWorldMat4 ), vec4( lWorldPositionVec3, 1.0 ) ).xyz;

    //float lfMaxScale = max( length( lPerMeshUniforms.gWorldMat4[0] ), max( length( lPerMeshUniforms.gWorldMat4[1] ), length( lPerMeshUniforms.gWorldMat4[2] ) ) );

    lTexCoords.xyz = (lObjectSpaceVec3.xyz) + 0.5;
    lTexCoords.y   = 1.0 - lTexCoords.y;
    //lTexCoords.xy *= 1.0 / (lfMaxScale * lfMaxScale);
    
    if ( lTexCoords.x <  0.0 ||
         lTexCoords.x >= 1.0 ||
         lTexCoords.y <  0.0 ||
         lTexCoords.y >= 1.0 ||
         lTexCoords.z <  0.0 ||
         lTexCoords.z >= 1.0 )
    {
        discard;
    }

    return lTexCoords.xy;
}

mat3
GetDecalTangentSpaceMatrix(
    in vec3 worldPosition,
    in mat4 lCameraMat4 )
{
    vec3 ddxWp    = dFdx( worldPosition );
    vec3 ddyWp    = dFdy( worldPosition );
    vec3 normal   = normalize( cross( ddyWp, ddxWp ) );
    vec3 binormal = normalize( ddxWp );
    vec3 tangent  = normalize( ddyWp );

    mat3 View;
    mat3 tangentToView;

    View[0] = lCameraMat4[0].xyz;
    View[1] = lCameraMat4[1].xyz;
    View[2] = lCameraMat4[2].xyz;

#ifdef D_PLATFORM_ORBIS
    tangentToView[0] = MUL( -tangent, View );
    tangentToView[1] = MUL( binormal, View );
    tangentToView[2] = MUL( -normal , View );
#else
    tangentToView[0] = MUL( tangent, View );
    tangentToView[1] = MUL( binormal, View );
    tangentToView[2] = MUL( normal , View );
#endif

    return tangentToView;
}

mat3 
GetCotangentFrame( vec3 lPositionVec3, vec3 lViewPosition, vec2 uv )
{    
    vec3 ddxWp = dFdx( lPositionVec3 );

#ifdef D_PLATFORM_ORBIS
    vec3 ddyWp = -dFdy( lPositionVec3 );
#else
    vec3 ddyWp = dFdy( lPositionVec3 );
#endif

    vec3 lVertexNormal = normalize( cross( ddyWp, ddxWp ) );
    vec3 lViewDirVec3 = -normalize( lViewPosition - lPositionVec3.xyz );

    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( lViewDirVec3 );
    vec3 dp2 = dFdy( lViewDirVec3 );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );

    // solve the linear system
    vec3 dp2perp = cross( dp2, lVertexNormal );
    vec3 dp1perp = cross( lVertexNormal, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;

    // construct a scale-invariant frame 
	float invmax = invsqrt(max(dot(T, T), dot(B, B)));
    return mat3( T * invmax, B * invmax, -lVertexNormal );

}

//-----------------------------------------------------------------------------
///
///     Fragment Main
///
///     @brief      Fragment Main
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
#if defined( _F47_WRITE_LOG_Z ) || defined(D_DEPTH_CLEAR)
FRAGMENT_MAIN_COLOUR_DEPTH_SRT
#else
#if defined( D_DEPTHONLY )
VOID_MAIN_COLOUR_SRT
#else
FRAGMENT_MAIN_COLOUR_SRT
#endif
#endif
{



    //-----------------------------------------------------------------------------
    ///
    ///     Fading
    ///
    //-----------------------------------------------------------------------------
    #ifdef D_FADE
    {   
        #if defined( _F44_IMPOSTER )
        vec4 lTexCoords = IN( mTexCoordsVec4 ) * lUniforms.mpCustomPerMaterial->gImposterDataVec4.x;
        #else
        vec4 lTexCoords = IN( mTexCoordsVec4 );
        #endif

        CheckFadeUber(
            SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFadeNoiseMap ),
            lTexCoords,
            IN( mWorldPositionVec3_mfFadeValueForInstance ).w );
    }
    #endif

#ifdef D_DEPTH_CLEAR
    FRAGMENT_COLOUR = vec4( 0.0, 0.0, 0.0, 0.0 );
    FRAGMENT_DEPTH = 1.0;
    return;
#endif

    //-----------------------------------------------------------------------------
    ///
    ///     Diffuse Maps
    ///
    //-----------------------------------------------------------------------------
    vec4  lColourVec4;
    vec3  lNormalVec3 = vec3( 0.0, 1.0, 0.0 );
    vec3  lWorldPositionVec3 = IN( mWorldPositionVec3_mfFadeValueForInstance ).xyz;
    float lLowAlpha   = 1.0;
    float lHighAlpha  = 1.0;

    #ifdef D_TEXCOORDS
    //{
        vec4 lTexCoordsVec4;
        lTexCoordsVec4 = IN( mTexCoordsVec4 );


        #ifdef D_DEFERRED_DECAL
        {
            lTexCoordsVec4 = GetDecalTexCoords( 
                                DEREF_PTR( lUniforms.mpPerFrame ),
                                DEREF_PTR( lUniforms.mpCommonPerMesh ),
                                SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gBufferMap ),
                                IN( mScreenSpacePositionVec4 ),
                                lWorldPositionVec3 ).xyxy;
        }
        #endif

    #if defined( D_IMPOSTER_COLOUR ) && defined( _F12_BATCHED_BILLBOARD )
        lTexCoordsVec4.y = 1.0 - lTexCoordsVec4.y;
    #endif


    //}
    #endif

    #ifdef _F01_DIFFUSEMAP
    {
        lColourVec4 = texture2D( lUniforms.mpCustomPerMaterial->gDiffuseMap, lTexCoordsVec4.xy );
        
        lHighAlpha           = GetUpperValue( lColourVec4.a );
        lLowAlpha            = GetLowerValue( lColourVec4.a );

        #if !defined( _F09_TRANSPARENT ) && !defined( _F11_ALPHACUTOUT )
        {
            // There is not a transparent texture
            lColourVec4.a = 1.0;
    }
        #endif
    }
    #else
    {
        lColourVec4 = IN( mMaterialVec4 );
    }
    #endif

    
    #ifdef _F16_DIFFUSE2MAP
    //{
    vec4 lDiffuse2Vec4;

        lDiffuse2Vec4 = texture2D( lUniforms.mpCustomPerMaterial->gDiffuse2Map, lTexCoordsVec4.zw );
    
    #ifndef _F17_MULTIPLYDIFFUSE2MAP
        {
            lColourVec4.rgb = mix( lColourVec4.rgb, lDiffuse2Vec4.rgb, lDiffuse2Vec4.a );
        }
    #endif

    //}
    #endif

    #ifdef _F21_VERTEXCOLOUR
    {
        lColourVec4 *= IN( mColourVec4 );	
    }
    #endif

    //-----------------------------------------------------------------------------
    ///
    ///     Transparency
    ///
    //-----------------------------------------------------------------------------
 
    #ifdef _F22_TRANSPARENT_SCALAR
    {
        // Transparency scalar comes from float in Material
        lColourVec4.a *= IN( mMaterialVec4 ).a;
    }
    #endif

    // Discard fully transparent pixels
    #if defined( _F09_TRANSPARENT ) || defined( _F22_TRANSPARENT_SCALAR ) || defined( _F11_ALPHACUTOUT )
    {
        if( lColourVec4.a < kfAlphaThreshold )
        {
            discard;
        }

        #ifdef _F11_ALPHACUTOUT
        {
            lColourVec4.a = smoothstep( kfAlphaThreshold, kfAlphaThresholdMax, lColourVec4.a );
        }
        #endif
    }
    #endif

#if defined( D_DEPTHONLY )

#if !defined( D_PLATFORM_ORBIS )
    FRAGMENT_COLOUR  = vec4(0.0);
#endif

#else

    //-----------------------------------------------------------------------------
    ///
    ///     Detail Maps
    ///
    //-----------------------------------------------------------------------------
    
    #ifdef D_MASKS
    //{
        vec4 lMasks = texture2D( lUniforms.mpCustomPerMaterial->gMasksMap, lTexCoordsVec4.xy );
    //}
    #endif

    #ifdef D_DETAIL
    //{
        float lfImageIndex      = floor( lMasks.a * 10.0 );
        float lfIsBlendImage    = ceil( clamp( lUniforms.mpCustomPerMesh->gCustomParams02Vec4.z - lfImageIndex, 0.0, 1.0 ) );
        float lfIsMultiplyImage = 1.0 - lfIsBlendImage;
        float lfDetailHighAlpha = lHighAlpha;
        float lfDetailLowAlpha  = lLowAlpha;

        lfImageIndex = mix( lfImageIndex, lUniforms.mpCustomPerMesh->gCustomParams02Vec4.z + (lfImageIndex - (10.0 - lUniforms.mpCustomPerMesh->gCustomParams02Vec4.w)), lfIsMultiplyImage );

        float lfDetailScale         = mix( lUniforms.mpCustomPerMesh->gCustomParams02Vec4.x, lUniforms.mpCustomPerMesh->gCustomParams02Vec4.y, lfIsBlendImage );
        vec4  lDetailNormalVec4     = texture2DArray( lUniforms.mpCustomPerMaterial->gDetailNormalMap, vec3((lTexCoordsVec4.xy * lfDetailScale), lfImageIndex ) );

        float lfBlendSize = (step( 0.5, 1.0 - lMasks.b ) * 0.4) + 0.1;
        float lfBlendHeightMin = clamp( 1.0 - lDetailNormalVec4.r, 0.05, 0.95 );
        float lfBlendHeightMax = min( lfBlendHeightMin + lfBlendSize, 0.95 );

    #if defined( _F41_DETAIL_DIFFUSE ) || defined( _F39_METALLIC_MASK ) || defined( _F35_GLOW_MASK )
        {
            vec4   lDetailDiffuseVec4 = texture2DArray( lUniforms.mpCustomPerMaterial->gDetailDiffuseMap, vec3((lTexCoordsVec4.xy * lfDetailScale), lfImageIndex ) ); 

        #ifdef _F41_DETAIL_DIFFUSE
            {
                lColourVec4.rgb = mix( lColourVec4.xyz, lDetailDiffuseVec4.xyz,                          lfIsBlendImage    * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
                lColourVec4.rgb = mix( lColourVec4.xyz, lColourVec4.xyz * lDetailDiffuseVec4.xyz, lfIsMultiplyImage * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
            }
            #endif

        lHighAlpha = mix( lHighAlpha, GetUpperValue( lDetailDiffuseVec4.a ), lfIsBlendImage * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
        lHighAlpha = mix( lHighAlpha, GetUpperValue( lDetailDiffuseVec4.a ) * lHighAlpha, lfIsMultiplyImage * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );

        lLowAlpha = mix( lLowAlpha, GetLowerValue( lDetailDiffuseVec4.a ), lfIsBlendImage * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
        lLowAlpha = mix( lLowAlpha, GetLowerValue( lDetailDiffuseVec4.a ) * lLowAlpha, lfIsMultiplyImage * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
        }
    #endif
    //}
    #endif

    #ifdef _F24_AOMAP
    {
        lColourVec4.rgb *= lMasks.r;
    }
    #endif

    #ifdef _F17_MULTIPLYDIFFUSE2MAP
    {
        lColourVec4.rgb *= lDiffuse2Vec4.r;
    }
    #endif

    //-----------------------------------------------------------------------------
    ///
    ///     Normals
    ///
    //-----------------------------------------------------------------------------
    #ifdef _F03_NORMALMAP
    //{
        #ifdef _F43_NORMAL_TILING
        {    
            lTexCoordsVec4.xy *= lUniforms.mpCustomPerMesh->gCustomParams01Vec4.z;
        }
        #endif
        
            vec4 lTexColour = texture2D( lUniforms.mpCustomPerMaterial->gNormalMap, lTexCoordsVec4.xy );
            vec3 lNormalTexVec3 = DecodeNormalMap( lTexColour );
            lNormalVec3 = lNormalTexVec3;
    //}
    #elif defined( D_USES_VERTEX_NORMAL )
    {
        lNormalVec3 = IN( mTangentSpaceNormalVec3 );
    }
    #endif

    #ifdef _F42_DETAIL_NORMAL
    {
        vec3 lDetailNormalVec3 = DecodeNormalMap( lDetailNormalVec4 );

        lDetailNormalVec3   = mix( lDetailNormalVec3, lNormalVec3, 0.5 );
        lDetailNormalVec3.z = lNormalVec3.z;

        lNormalVec3 = mix( lNormalVec3, lDetailNormalVec3, smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
    }
    #endif
    
    
    #if defined( _F03_NORMALMAP ) || defined( _F42_DETAIL_NORMAL )
    {
        mat3 lTangentSpaceMat;

        #ifdef _F52_DECAL_NORMAL
        {
           // lTangentSpaceMat = GetDecalTangentSpaceMatrix( lWorldPositionVec3, lUniforms.mpPerFrame->gViewMat4 );
            lTangentSpaceMat = GetCotangentFrame( lWorldPositionVec3, lUniforms.mpPerFrame->gViewPositionVec3, lTexCoordsVec4.xy );
        }
        #else
        {
            lTangentSpaceMat[0] = IN( mTangentMatRow1Vec3 );
            lTangentSpaceMat[1] = IN( mTangentMatRow2Vec3 );
            lTangentSpaceMat[2] = IN( mTangentMatRow3Vec3 );
        }
        #endif
   
        lNormalVec3 = normalize( MUL( lTangentSpaceMat, lNormalVec3 ) );            

        }
        #endif

    //-----------------------------------------------------------------------------
    ///
    ///     Lighting
    ///
    //-----------------------------------------------------------------------------
    
    float lfRoughness  = 1.0;
    float lfMetallic   = 0.0;
    float lfSubsurface = 0.0;

    #ifndef _F07_UNLIT
    {
        #ifdef _F25_ROUGHNESS_MASK
        {
            lfRoughness = lMasks.g;

            #ifdef D_DETAIL
            {
                lfRoughness  = mix( lfRoughness, lDetailNormalVec4.b,               lfIsBlendImage    * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
                lfRoughness  = mix( lfRoughness, lDetailNormalVec4.b * lfRoughness, lfIsMultiplyImage * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
            }
            #endif

            lfRoughness = 1.0 - lfRoughness;
        }
        #endif

        lfRoughness *= lUniforms.mpCustomPerMaterial->gMaterialParamsVec4.x;

        #ifdef _F39_METALLIC_MASK
        {
            lfMetallic = lHighAlpha;

            #ifdef D_DETAIL
            {
                lfMetallic = mix( lfMetallic, lDetailNormalVec4.b,               lfIsBlendImage    * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
                lfMetallic = mix( lfMetallic, lDetailNormalVec4.b * lfRoughness, lfIsMultiplyImage * smoothstep( lfBlendHeightMin, lfBlendHeightMax, lMasks.b ) );
            }
            #endif        
        }
        #else 
        {
            lfMetallic = lUniforms.mpCustomPerMaterial->gMaterialParamsVec4.z;
        }
        #endif

        #ifdef _F40_SUBSURFACE_MASK
        {
            lfSubsurface = lMasks.r;
        }
        #endif

        #if defined( _F33_GRASS ) && defined( _F03_NORMALMAP )
        {

            lNormalVec3 = normalize( IN( mWorldPositionVec3_mfFadeValueForInstance ).xyz - IN( mCenterPositionVec3 ).xyz );
            lNormalVec3 = normalize( lNormalVec3 + IN( mTangentSpaceNormalVec3 ) * lNormalTexVec3.z );
            lNormalVec3 = normalize( lNormalVec3 + IN( mCenteralNormalVec3 ).xyz * 2.5 );
        }
        #endif

        #if defined( _F32_LEAF )
        vec3 lViewDirVec3 = normalize( lUniforms.mpPerFrame->gViewPositionVec3 - IN( mWorldPositionVec3_mfFadeValueForInstance ).xyz );

        float lfNdotCam = abs( dot( lViewDirVec3, normalize( IN( mTangentSpaceNormalVec3 ).xyz ) ) );

        if ( lfNdotCam < 0.5 )
        {
            CheckFadeUber(
                SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFadeNoiseMap ),
                IN( mTexCoordsVec4 ),
                lfNdotCam * 2.0 );
        }
        #endif

    }
    #endif

    float lfGlow = 0.0;
    #ifdef _F34_GLOW
        {
        #if defined( _F35_GLOW_MASK ) && !defined( _F09_TRANSPARENT )
        {
            lfGlow = lUniforms.mpCustomPerMesh->gCustomParams01Vec4.y * lLowAlpha;
        }
        #else
        {
            lfGlow = lUniforms.mpCustomPerMesh->gCustomParams01Vec4.y;
        }
            #endif
    }
        #endif
    
    
    //-----------------------------------------------------------------------------
    ///
    ///     Write Output
    ///
    //-----------------------------------------------------------------------------

    int liMaterialID = 0;

    #ifdef _F10_NORECEIVESHADOW
        liMaterialID |= D_NORECEIVESHADOW;
    #endif

    #ifdef _F50_DISABLE_POSTPROCESS
        liMaterialID |= D_DISABLE_POSTPROCESS;
    #endif

    #ifdef _F07_UNLIT
        liMaterialID |= D_UNLIT;
    #endif

    #if defined( _F33_GRASS ) || defined( _F32_LEAF )
        liMaterialID |= D_HUESHIFT;
    #endif

    #ifdef _F49_DISABLE_AMBIENT
        liMaterialID |= D_DISBALE_AMBIENT;
    #endif


    vec4 lOutColours0Vec4;
    vec4 lOutColours1Vec4;
    vec4 lOutColours2Vec4;
    vec4 lOutColours3Vec4;
    
    WriteOutput(
        lOutColours0Vec4,
        lOutColours1Vec4,
        lOutColours2Vec4,
        lOutColours3Vec4,
        DEREF_PTR( lUniforms.mpPerFrame ),
        DEREF_PTR( lUniforms.mpCommonPerMesh ),
        DEREF_PTR( lUniforms.mpCustomPerMaterial ),
        lColourVec4,
        lWorldPositionVec3,
        lNormalVec3,
        liMaterialID,
        lfMetallic,
        lfRoughness,
        lfSubsurface,
        lfGlow,
#ifdef D_USE_SCREEN_POSITION   
        IN( mScreenSpacePositionVec4 ).xyzw 
#else
		vec4(0.0)
#endif
        );
#if !defined( D_ATTRIBUTES )
    FRAGMENT_COLOUR  = lOutColours0Vec4;
#else

    #ifdef D_DEFERRED_DECAL
    {
        #ifdef _F51_DECAL_DIFFUSE
        {
            FRAGMENT_COLOUR0 = vec4( lOutColours0Vec4.xyz, lColourVec4.a );
            //FRAGMENT_COLOUR0 = vec4( lTexCoordsVec4.x, lTexCoordsVec4.y, 0.0, lColourVec4.a );
            //FRAGMENT_COLOUR0 = vec4( 1.0, 0.0, 0.0, lColourVec4.a );
        }
        #else
        {
            FRAGMENT_COLOUR0 = vec4(0.0); // Discard Colour
        }
        #endif

        //FRAGMENT_COLOUR1 = lOutColours1Vec4;
        FRAGMENT_COLOUR1 = vec4(0.0);
        
        #ifdef _F03_NORMALMAP
        {
            FRAGMENT_COLOUR2 = vec4( lOutColours2Vec4.xyz, lColourVec4.a );
        }
        #else
        {
            FRAGMENT_COLOUR2 = vec4(0.0); // Discard Colour
        }
        #endif

        FRAGMENT_COLOUR3 = lOutColours3Vec4;
    }
    #else
    {
        FRAGMENT_COLOUR0 = lOutColours0Vec4;
        FRAGMENT_COLOUR1 = lOutColours1Vec4;
        FRAGMENT_COLOUR2 = lOutColours2Vec4;
        FRAGMENT_COLOUR3 = lOutColours3Vec4;
    }
    #endif

    
    
#endif

#endif

    #if defined( _F47_WRITE_LOG_Z )
    {
        // For large polys we need to write z per pixel instead of letting it interpolate as it becomes slightly inaccurate and we get depth artifacts. (logZ is used in a calculation in the pixel shader).
        FRAGMENT_DEPTH = LinearToLogDepth_Pixel( IN( mfLogZ ), lUniforms.mpPerFrame->gClipPlanesVec4 );
    }
    #endif
}
 
