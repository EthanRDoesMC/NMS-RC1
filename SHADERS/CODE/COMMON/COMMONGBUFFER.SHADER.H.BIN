////////////////////////////////////////////////////////////////////////////////
///
///     @file       CommonGBuffer.h
///     @author     User
///     @date       
///
///     @brief      CommonLighting
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 

#ifndef D_COMMONGBUFFER_H
#define D_COMMONGBUFFER_H

//-----------------------------------------------------------------------------
//      Include files

#define D_HUESHIFT            ( 1 << 0 ) 
#define D_NORECEIVESHADOW     ( 1 << 1 ) 
#define D_DISABLE_POSTPROCESS ( 1 << 2 ) 
#define D_UNLIT               ( 1 << 3 ) 
#define D_NOWATER             ( 1 << 4 ) 
#define D_DISBALE_AMBIENT     ( 1 << 5 ) 

#include "common/Defines.shader.h"
#include "Common/Common.shader.h"
#include "Common/CommonDepth.shader.h"

float
EncodeUnitScalars(
    in float lfUnitScalarA,
    in float lfUnitScalarB )
{
    int liUpper = int( saturate( lfUnitScalarB ) * 255.0 ) << 8;
    int liLower = int( saturate( lfUnitScalarA ) * 255.0 );

    return float( liUpper | liLower );

    //return lfUnitScalarA;
}

void
DecodeUnitScalars(
    in  float lfEncodedFloat,
    out float lfUnitScalarA,
    out float lfUnitScalarB )
{
    lfUnitScalarA = float(   int( lfEncodedFloat )        & 0xFF ) / 255.0;
    lfUnitScalarB = float( ( int( lfEncodedFloat ) >> 8 ) & 0xFF ) / 255.0;
}

float
EncodeUnitScalars(
    in int   liUnitScalarA,
    in float lfUnitScalarB )
{
    int liUpper = int( saturate( lfUnitScalarB ) * 255.0 ) << 8;
    int liLower = liUnitScalarA & 0xFF;

    return float( liUpper | liLower );

    //return lfUnitScalarA;
}

void
DecodeUnitScalars(
    in  float lfEncodedFloat,
    out int   liUnitScalarA,
    out float lfUnitScalarB )
{
    liUnitScalarA = int( lfEncodedFloat ) & 0xFF;
    lfUnitScalarB = float( ( int( lfEncodedFloat ) >> 8 ) & 0xFF ) / 255.0;
}

// 4bit


float
Encode4BitUnitScalars(
    in float lfUnitScalarA,
    in float lfUnitScalarB )
{
    int liUpper = int( saturate( lfUnitScalarB ) * 15.0 ) << 4;
    int liLower = int( saturate( lfUnitScalarA ) * 15.0 );

    return float( liUpper | liLower ) / 255.0;

    //return lfUnitScalarA;
}

void
Decode4BitUnitScalars(
    in  float lfEncodedFloat,
    out float lfUnitScalarA,
    out float lfUnitScalarB )
{
    lfEncodedFloat *= 255.0;
    lfUnitScalarA = float( int( lfEncodedFloat )        & 0xF ) / 15.0;
    lfUnitScalarB = float( ( int( lfEncodedFloat ) >> 4 ) & 0xF ) / 15.0;
}

float
Encode4BitUnitScalars(
in int   liUnitScalarA,
in float lfUnitScalarB )
{
    int liUpper = int( saturate( lfUnitScalarB ) * 15.0 ) << 4;
    int liLower = liUnitScalarA & 0xF;

    return float( liUpper | liLower ) / 255.0;

    //return lfUnitScalarA;
}

void
Decode4BitUnitScalars(
    in  float lfEncodedFloat,
    out int   liUnitScalarA,
    out float lfUnitScalarB )
{
    lfEncodedFloat *= 255.0;
    liUnitScalarA = int( lfEncodedFloat ) & 0xF;
    lfUnitScalarB = float( ( int( lfEncodedFloat ) >> 4 ) & 0xF ) / 15.0;
}

//-----------------------------------------------------------------------------
///
///     EncodeScalarAsVector
///
//-----------------------------------------------------------------------------
vec4
EncodeScalarAsVector(
    in float lfScalar )
{
    vec4 lEncoded;

    float lfScaled = lfScalar * 2048.0;

    lEncoded = vec4( floor( lfScaled ), fract( lfScaled ), 0.0, 0.0 );
    return lEncoded;
}

//-----------------------------------------------------------------------------
///
///     EncodeScalarAsVector
///
//-----------------------------------------------------------------------------
float
DecodeScalarAsVector(
    in vec4  lEncoded )
{
    return dot( lEncoded, vec4( 1.0 / 2048.0 ) );
}

//-----------------------------------------------------------------------------
///
///     EncodeNormal
///
//-----------------------------------------------------------------------------
void
EncodeNormal(
    in  vec3 lNormal,
    out vec3 lBuffer )
{
    lBuffer = lNormal * 0.5 + vec3( 0.5 );
}

//-----------------------------------------------------------------------------
///
///     DecodeNormal
///
//-----------------------------------------------------------------------------
vec3
DecodeNormal(
    in vec3 lBuffer )
{

    return lBuffer * 2.0 - 1.0;;
}

//-----------------------------------------------------------------------------
///
///     DecodeGBuffer
///
//-----------------------------------------------------------------------------
void
DecodeGBuffer(
    in  vec2  lScreenPosVec2,
    in  vec4  lClipPlanes,
    in  mat4  lInverseProjectionMat4,
    in  mat4  lInverseViewMat4,
    in  vec3  lViewPositionVec3,
    in  vec4  lBuffer0_Vec4,
    in  vec4  lBuffer1_Vec4,
    in  vec4  lBuffer2_Vec4,
    in  vec4  lBuffer3_Vec4,
    out vec3  lColourVec3,
    out vec3  lPositionVec3,
    out vec3  lNormalVec3,
    out int   liMaterialID,
    out float lfRoughness,
    out float lfMetallic,
    out float lfSubsurface,
    out float lfGlow )
{
    lColourVec3       = lBuffer0_Vec4.rgb;
    lfGlow            = lBuffer0_Vec4.a;

    float lfDepth     = FastDenormaliseDepth( lClipPlanes, DecodeDepthFromColour( lBuffer1_Vec4 ) );
    lPositionVec3     = RecreatePositionFromDepth( lfDepth, lScreenPosVec2, lViewPositionVec3, lInverseProjectionMat4, lInverseViewMat4 );

    lNormalVec3       = DecodeNormal( lBuffer2_Vec4.xyz );

    liMaterialID      = int(lBuffer3_Vec4.r * 255.0 );
    lfRoughness       = ( lBuffer3_Vec4.g * 16.0 );
    lfMetallic        = lBuffer3_Vec4.b;
    lfSubsurface      = lBuffer3_Vec4.a;
}

//-----------------------------------------------------------------------------
///
///     EncodeGBuffer
///
//-----------------------------------------------------------------------------
void
EncodeGBuffer(
    in  vec4  lClipPlanes,
    in  vec4  lClipPlanesR,
    in  vec3  lViewPositionVec3,
    in  mat4  lViewMat4,
    out vec4  lBuffer0_Vec4,
    out vec4  lBuffer1_Vec4,
    out vec4  lBuffer2_Vec4,
    out vec4  lBuffer3_Vec4,
    in  vec3  lColourVec3,
    in  vec3  lPositionVec3,
    in  vec3  lNormalVec3,
    in  int   liMaterialID,
    in  float lfRoughness,
    in  float lfMetallic,
    in  float lfSubsurface,
    in  float lfGlow )
{
    lBuffer0_Vec4.xyz = lColourVec3;
    lBuffer0_Vec4.a    = saturate(lfGlow);

    float lDepth      = FastNormaliseDepth( lClipPlanesR, length( lPositionVec3 - lViewPositionVec3 ) );
    lBuffer1_Vec4     = EncodeDepthToColour( lDepth );

    EncodeNormal( lNormalVec3, lBuffer2_Vec4.xyz );

    lBuffer3_Vec4.r    = float(liMaterialID) / 255.0;
    lBuffer3_Vec4.g    = lfRoughness * ( 1.0 / 16.0 );
    lBuffer3_Vec4.b    = saturate(lfMetallic);
    lBuffer3_Vec4.a    = saturate(lfSubsurface);
}

#endif
































