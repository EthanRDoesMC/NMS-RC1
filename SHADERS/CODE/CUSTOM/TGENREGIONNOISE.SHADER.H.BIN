////////////////////////////////////////////////////////////////////////////////
///
///     @file       ComputeNoise.h
///     @author     ccummings
///     @date       
///
///     @brief      Basic shader to execute a series of Noise3D samples
///
///     Copyright (c) 2016 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

#include "Common/Defines.shader.h"
#include "Custom/TerrainGenCommon.h"

STATIC_CONST int kiDefaultRegionOctaves = 3; 

// Declare thread count for each thread group.
[NUM_THREADS(64, 1, 1)]

// Entry point for the compute shader with semantics that define the 
// variations of the ID to determine the thread instance invoked.
void main(uint3 dispatchThreadID : S_DISPATCH_THREAD_ID, cTkGenerateRegionNoiseComputeUniforms* lpUniforms : S_SRT_DATA)
{
    //get index and bail if gone to far
	uint idx = dispatchThreadID.x;
	if (idx >= lpUniforms->miNumElements)
		return;

    vec3 lSeedOffset                    = lpUniforms->mSeedOffset;
    float lfFeatureScale                = lpUniforms->mfFeatureScale;
    float lfRegionRatio                 = lpUniforms->mfRegionRatio;
    float lfOneMinusSqrtRegionRatio     = lpUniforms->mfOneMinusSqrtRegionRatio;
    float lfOneOverSqrtRegionRatio      = lpUniforms->mfOneOverSqrtRegionRatio;

    float lfRegionNoise;

    lfRegionNoise = 1.0f;

    if ( lfFeatureScale > 0.0f && lfRegionRatio > 0.0f && lfRegionRatio < 1.0f )
    {
        vec3 lPosition = vec3(lpUniforms->mafX[idx], lpUniforms->mafY[idx], lpUniforms->mafZ[idx]);
        lfRegionNoise = SmoothNoise(
            lPosition,
            lSeedOffset,
            lfFeatureScale,
            kiDefaultRegionOctaves);

        lfRegionNoise = ScaleNoise(lfRegionNoise,lfOneMinusSqrtRegionRatio,lfOneOverSqrtRegionRatio);
    }

    lpUniforms->mafNoise[idx] = lfRegionNoise;

}
  