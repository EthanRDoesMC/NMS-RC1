////////////////////////////////////////////////////////////////////////////////
///
///     @file       WaterFragment.h
///     @author     User
///     @date       
///
///     @brief      WaterFragmentShader
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 

// define this before including commonuniforms so we have the correct samplers declared.
#define D_FADE

//-----------------------------------------------------------------------------
//      Include files

#include "Common/Defines.shader.h"
#include "Common/Common.shader.h"
#include "Common/CommonUniforms.shader.h"
#include "Common/CommonFragment.shader.h"
#include "Common/CommonDepth.shader.h"

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

#ifdef D_SCATTERING

#include "LightCommon.shader.h"
#include "Common/CommonScattering.shader.h"
#include "Common/CommonFog.shader.h"


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION
    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END

FRAGMENT_MAIN_COLOUR_SRT
{
    vec4  lFragmentColourVec4 = vec4( 0.0, 0.0, 0.0, 0.0 );

    // Water Fog
    float lfHeightFade = length( lUniforms.mpPerFrame->gViewPositionVec3 - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz ) - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;
    lfHeightFade       = 1.0 - clamp( ( lfHeightFade - 2000.0 ) / 1000.0, 0.0, 1.0 );

    vec2  lFragCoordsVec2          = IN( mTexCoordsVec2 );//( IN( mScreenSpacePositionVec4 ).xy / IN( mScreenSpacePositionVec4 ).w ) * 0.5 + 0.5;
    vec3  lPositionVec3            = texture2D( lUniforms.mpCustomPerMaterial->gBuffer2Map, lFragCoordsVec2 ).xyz + lUniforms.mpPerFrame->gViewPositionVec3;
    vec3  lPlanetPosition          = lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz;
    float lfRadius                 = lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;

    vec3  lWaterFogWavelengthVec3  = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gWaterColourNearVec4.rgb ) * texture2D( lUniforms.mpCustomPerMaterial->gBuffer1Map, lFragCoordsVec2 ).rgb;
    vec3  lWaterColourVec3         = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gWaterColourFarVec4.rgb );
    float lfWaterHeight            = lUniforms.mpCustomPerMaterial->gWaterFogVec4.r;
    float lfWaterStrength          = lUniforms.mpCustomPerMaterial->gWaterFogVec4.g;
    float lfWaterColourStrength    = lUniforms.mpCustomPerMaterial->gWaterColourNearVec4.a;

    vec3  lNearPosition = lUniforms.mpPerFrame->gViewPositionVec3 - lPlanetPosition;
    vec3  lFarPosition  = lPositionVec3 - lPlanetPosition;
    if( length( lNearPosition ) <  lfRadius + lfWaterHeight || length( lFarPosition ) <  lfRadius + lfWaterHeight )
    {
        if( GetRayIntersectionPoint( lNearPosition, lFarPosition, lfRadius + lfWaterHeight, lNearPosition, lFarPosition ) > 0.0 )
        {
            float lfFogDistance = length( lFarPosition - lNearPosition );

            float lfFogValue        = lfFogDistance * lfWaterStrength;
            lfFogValue              = 1.0 / exp( lfFogValue * lfFogValue );
            lfFogValue              = 1.0 - clamp( lfFogValue, 0.0, 1.0 );

            float lfWaterFade       = lfFogDistance * lfWaterColourStrength;
            lfWaterFade             = 1.0 / exp( lfWaterFade );
            lfWaterFade             = 1.0 - clamp( lfWaterFade, 0.0, 1.0 );

            vec3 lWaterColour       = mix( lWaterFogWavelengthVec3, lWaterColourVec3, clamp( lfWaterFade, 0.0, 1.0 ) );
            lFragmentColourVec4.rgb = lWaterColour;
            lFragmentColourVec4.a   = clamp( lfFogValue * lfHeightFade, 0.0, 1.0 );
        }
    }

    FRAGMENT_COLOUR = lFragmentColourVec4;
}


#else 
//-----------------------------------------------------------------------------
///
///     Input
///
///     @brief  Input
///
//-----------------------------------------------------------------------------

#include "Custom/WaterCommon.h"
#include "Common/CommonLighting.shader.h"
#include "Common/CommonFade.shader.h"
#include "Common/CommonPlanet.shader.h"
#include "Common/CommonTriplanarTexturing.shader.h"

DECLARE_INPUT
    IN_SCREEN_POSITION
    
    INPUT( vec4,   mWorldPositionVec4,         TEXCOORD0 )
    INPUT( vec4,   mLocalNormalVec3,           TEXCOORD1 )
    INPUT( vec4,   mScreenSpacePositionVec4,   TEXCOORD2 )
    INPUT( vec3,   mfLogZ_mfDepth_mfWaveHeight,TEXCOORD3 )
    //INPUT( mat3,   mNormalMat3,                TEXCOORD4 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions


vec3
ComputeWaterLighting(
    in vec3                   lPositionVec3,
    in vec3                   lNormalVec3,
    in vec3                   lViewPositionVec3,
    in vec3                   lLightDirectionVec3,
    in vec3                   lBaseColourVec3,
    in vec3                   lReflectionColourVec3,
    in vec4                   lLightColourVec4,
    in vec4                   lPlanetPositionVec4,
    in float                  lfMetallic, // 1.0
    in float                  lfNonMetalSpecularScale, //0.5
    in float                  lfRoughness, // 0.0
    in float                  lfShadow )
{
    vec3   lFinalColour = vec3( 0.0 );
    vec3   lDiffuseColourVec3;
    vec3   lSpecularColourVec3;
    vec3   lViewDirVec3;
    float  lfAttenuation = 1.0;
    float  lfNoV;
    float  lfNoL;

    lViewDirVec3 = normalize( lViewPositionVec3 - lPositionVec3.xyz );

    lfNoV = max( 0.0, dot( lNormalVec3, lViewDirVec3 ) );
    lfNoL = max( 0.0, dot( lNormalVec3, lLightDirectionVec3 ) );

    {
        float DielectricSpecular = 0.08 * lfNonMetalSpecularScale;

        lDiffuseColourVec3 = lBaseColourVec3 - ( lBaseColourVec3 * lfMetallic );	// 1 mad
        lSpecularColourVec3 = ( DielectricSpecular - ( DielectricSpecular * lfMetallic ) ) + ( lBaseColourVec3 * lfMetallic );	// 2 mad
    }

    {
        lSpecularColourVec3 = EnvBRDFApprox( lSpecularColourVec3, lfRoughness, lfNoV );
    }

    {
        vec3   lLightColourVec3 = /*GammaCorrectInput*/ ( lLightColourVec4.xyz ) * lLightColourVec4.w;
        vec3   lReflectionVec3 = reflect( -lViewDirVec3, lNormalVec3 );

        float  lfRoL = max( 0.0, dot( lReflectionVec3, lLightDirectionVec3 ) );
        lFinalColour += ( ( lfShadow * lfNoL ) ) * lLightColourVec3 * ( lDiffuseColourVec3 + lSpecularColourVec3 * PhongApprox( lfRoughness, lfRoL ) );

        {
            mat3 lUpMatrix = GetInverseWorldUpTransform( lViewPositionVec3, lPlanetPositionVec4 );
            vec3 lTransformedRelectionVec3 = MUL( lUpMatrix, lReflectionVec3 );
            vec3 lTransformedNormalVec3 = MUL( lUpMatrix, lNormalVec3 );

            vec3 SpecularIBL = lReflectionColourVec3;
            lFinalColour += lfShadow * SpecularIBL * lSpecularColourVec3;
        }
    }

    return lFinalColour;
}

//-----------------------------------------------------------------------------
///
///     Main
///
///     @brief      Main Fragment
///
///     @param      void
///     @return     Nothing.
///
//-----------------------------------------------------------------------------
FRAGMENT_MAIN_COLOUR_DEPTH_GE_SRT
{
    vec4 lFragmentColourVec4 = vec4( 0.0, 0.0, 0.0, 1.0 );
    //vec4 lFragmentColourVec4 = vec4( vec3( 0.5 ), 1.0 );

    vec3  lViewDirVec3           = normalize( lUniforms.mpPerFrame->gViewPositionVec3 - IN( mWorldPositionVec4 ).xyz );
    vec3  lPlanetRelPositionVec3 = IN( mWorldPositionVec4 ).xyz - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz;
    vec3  lPlanetPosition        = lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz;
    float lfRadius               = lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;


    CheckFade(
        SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFadeNoiseMap ),
        IN( mScreenSpacePositionVec4 ),
        lUniforms.mpCommonPerMesh->gfFadeValue );
        
    //-----------------------------------------------------------------------------
    ///
    ///     Normal Mapping
    ///
    //-----------------------------------------------------------------------------

    // Add waves to the local normal
    vec3   lLocalNormalVec3 = normalize( IN( mLocalNormalVec3 ).xyz );

    vec2  lWindDirection1  = lUniforms.mpCustomPerMaterial->gWindDirectionVec4.xy;
    vec2  lWindDirection2  = lUniforms.mpCustomPerMaterial->gWindDirectionVec4.zw;

    float lfWaveScale1     = lUniforms.mpCustomPerMaterial->gWaveScaleVec4.x;
    float lfWaveScale2     = lUniforms.mpCustomPerMaterial->gWaveScaleVec4.y;

    vec2  lWaveAnimation1  = lWindDirection1 * lUniforms.mpPerFrame->gfTime * lUniforms.mpCustomPerMaterial->gWaveSpeedVec4.x;
    vec2  lWaveAnimation2  = lWindDirection2 * lUniforms.mpPerFrame->gfTime * lUniforms.mpCustomPerMaterial->gWaveSpeedVec4.y;

    vec3  lWaveNormal1Vec3 = GetTriPlanarNormal( lLocalNormalVec3, lPlanetRelPositionVec3, lWaveAnimation1, lfWaveScale1, SAMPLER2DPARAM(lUniforms.mpCustomPerMaterial->gLargeNormalMap) );
    vec3  lWaveNormal2Vec3 = GetTriPlanarNormal( lLocalNormalVec3, lPlanetRelPositionVec3, lWaveAnimation2, lfWaveScale2, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gLargeNormalMap ) );

    lLocalNormalVec3 += lWaveNormal1Vec3 * 0.1 * lUniforms.mpCustomPerMaterial->gWaveScaleVec4.z;
    lLocalNormalVec3 += lWaveNormal2Vec3 * 0.1 * lUniforms.mpCustomPerMaterial->gWaveScaleVec4.w;
    lLocalNormalVec3 = normalize( lLocalNormalVec3 );

    // Detailed normal mapping
    vec3   lMappedNormalVec3;

    float lfNormalMapScale1    = lUniforms.mpCustomPerMaterial->gWaterSurfaceParamsVec4.x;
    float lfNormalMapScale2    = lUniforms.mpCustomPerMaterial->gWaterSurfaceParamsVec4.y;

    vec2  lNormalMapAnimation1 = lWindDirection1 * lUniforms.mpPerFrame->gfTime * lUniforms.mpCustomPerMaterial->gWaterSurfaceParamsVec4.z;
    vec2  lNormalMapAnimation2 = lWindDirection2 * lUniforms.mpPerFrame->gfTime * lUniforms.mpCustomPerMaterial->gWaterSurfaceParamsVec4.w;

    vec3  lMappedNormal1Vec3 = GetTriPlanarNormal( lLocalNormalVec3, lPlanetRelPositionVec3, lNormalMapAnimation1, lfNormalMapScale1, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gNormalMap ) );
    vec3  lMappedNormal2Vec3 = GetTriPlanarNormal( lLocalNormalVec3, lPlanetRelPositionVec3, lNormalMapAnimation2, lfNormalMapScale2, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gNormalMap ) );

    lMappedNormalVec3 = lMappedNormal1Vec3 + lMappedNormal2Vec3;
    lMappedNormalVec3 = normalize( lLocalNormalVec3 + lMappedNormalVec3 );

    float lfCameraHeight = length( lUniforms.mpPerFrame->gViewPositionVec3 - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.xyz );
    float lfDistanceFade = lfCameraHeight - lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;
    lfDistanceFade = clamp( ( lfDistanceFade - 1000.0 ) / 1000.0, 0.0, 1.0 );

    lMappedNormalVec3 = mix( lMappedNormalVec3, lLocalNormalVec3, lfDistanceFade );
    //lMappedNormalVec3 = normalize( MUL( IN( mNormalMat3 ), lMappedNormalVec3 ) );

    //-----------------------------------------------------------------------------
    ///
    ///     Reflections
    ///
    //-----------------------------------------------------------------------------
    float  lfFresnel;
    vec3   lReflectionVec3;
    vec3   lProjectedCoordsVec3;

    // Calculate coordinates on rendered texture
    lProjectedCoordsVec3  = IN( mScreenSpacePositionVec4 ).xyz / IN( mScreenSpacePositionVec4 ).w;
    lProjectedCoordsVec3  = lProjectedCoordsVec3 * 0.5 + 0.5;

    // Offset based on normal map
    lProjectedCoordsVec3 += vec3( dot( lMappedNormal1Vec3, lLocalNormalVec3 ) * 0.3, dot( lMappedNormal2Vec3, lLocalNormalVec3 ) * 0.3, 0.0 );
    lProjectedCoordsVec3 += vec3( IN( mfLogZ_mfDepth_mfWaveHeight ).z * 0.05, IN( mfLogZ_mfDepth_mfWaveHeight ).z * 0.05, 0.0 );

    // Get reflection from previously rendered scene
    float lfSpaceHeight   = lfCameraHeight;
    lfSpaceHeight        -= lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;
    lfSpaceHeight         = clamp( ( lfSpaceHeight - 400.0 ) / 100.0, 0.0, 1.0 );

#if defined( D_PLATFORM_ORBIS )
    //
    // on PS4, textures need to be flipped in y when they are created at runtime
    // preferably, we want to adjust the projection matrix to 
    // flip the contents of the texture already when it is being rendered to, in this case in
    // cGcEnvironment::RenderReflections()
    // for now it is ok to just flip the y texture coordinate
    //
    lProjectedCoordsVec3.y = 1.0 - lProjectedCoordsVec3.y;
#endif
    if( lfCameraHeight > lfRadius + lUniforms.mpCustomPerMaterial->gWaterFogVec4.r )
    {
        vec3 lWaterColourVec3 = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gWaterColourFarVec4.rgb ) * /*GammaCorrectInput*/( lUniforms.mpCommonPerMesh->gLightColourVec4.xyz );
        lReflectionVec3 = texture2D( lUniforms.mpCustomPerMaterial->gReflectionMap, lProjectedCoordsVec3.xy ).rgb;
        lReflectionVec3 = mix( lReflectionVec3*lWaterColourVec3, lReflectionVec3, lUniforms.mpCustomPerMaterial->gWaveSpeedVec4.b );
        lReflectionVec3 = mix( lReflectionVec3, lWaterColourVec3, lfSpaceHeight );
    }
    else
    {
        lReflectionVec3 = lUniforms.mpCustomPerMaterial->gWaterColourFarVec4.rgb * lUniforms.mpCommonPerMesh->gLightColourVec4.xyz;
    }

    // Calculate fresnel
    float lfAngle   = 0.0;
    
    if( lfCameraHeight > lfRadius + lUniforms.mpCustomPerMaterial->gWaterFogVec4.r )
    {
        lfAngle = dot( lViewDirVec3, lMappedNormalVec3 );
    }
    else
    {
        lfAngle = 1.0 - dot( lViewDirVec3, lMappedNormalVec3 );
    }

    float lfPower   = lUniforms.mpCustomPerMaterial->gFresnelParamsVec4.x;
    float lfBiasMin = lUniforms.mpCustomPerMaterial->gFresnelParamsVec4.y;
    float lfBiasMax = lUniforms.mpCustomPerMaterial->gFresnelParamsVec4.z - lfBiasMin;

    lfFresnel = clamp( pow( lfAngle, lfPower ), 0.0, 1.0 );
    lfFresnel = lfFresnel * lfBiasMax + lfBiasMin;
    
    lFragmentColourVec4.a = lfFresnel;


    //-----------------------------------------------------------------------------
    ///
    ///     Foam
    ///
    //-----------------------------------------------------------------------------
    float lfFoamArea = 0.0;
    float lfWaveArea = 0.0;
    float lfFoam     = 0.0;
    
    float lfFoamScale1   = lUniforms.mpCustomPerMaterial->gFoamParamsVec4.x;
    float lfFoamScale2   = lUniforms.mpCustomPerMaterial->gFoamParamsVec4.y;
    vec2  lFoamTime1Vec2 = lWindDirection1 * lUniforms.mpPerFrame->gfTime * lUniforms.mpCustomPerMaterial->gFoamParamsVec4.z;
    vec2  lFoamTime2Vec2 = lWindDirection2 * lUniforms.mpPerFrame->gfTime * lUniforms.mpCustomPerMaterial->gFoamParamsVec4.w;
    vec2  lFoamTime3Vec2 = lWindDirection2 * lUniforms.mpPerFrame->gfTime * lUniforms.mpCustomPerMaterial->gWaterSurfaceParamsVec4.z * 2.0;
    vec2  lFoamTime4Vec2 = lWindDirection1 * lUniforms.mpPerFrame->gfTime * lUniforms.mpCustomPerMaterial->gWaterSurfaceParamsVec4.w * 2.0;

    vec3 lFoamTextureAVec3 = GetTriPlanarColour( lLocalNormalVec3, lPlanetRelPositionVec3, lFoamTime1Vec2, lfFoamScale1, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFoamMap ) );
    vec3 lFoamTextureBVec3 = GetTriPlanarColour( lLocalNormalVec3, lPlanetRelPositionVec3, lFoamTime2Vec2, lfFoamScale2, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFoamMap ) );
    vec3 lFoamNormalVec3   = GetTriPlanarNormal( lLocalNormalVec3, lPlanetRelPositionVec3, lFoamTime3Vec2, lfFoamScale1 * 8.0, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFoamNormalMap ) );
    vec3 lFoamNormal2Vec3  = GetTriPlanarNormal( lLocalNormalVec3, lPlanetRelPositionVec3, lFoamTime4Vec2, lfFoamScale1 * 3.0, SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFoamNormalMap ) );


    lfFoamArea = clamp( IN( mfLogZ_mfDepth_mfWaveHeight ).y, 0.0, 1.0 );
    lfWaveArea = clamp( IN( mfLogZ_mfDepth_mfWaveHeight ).y + IN( mfLogZ_mfDepth_mfWaveHeight ).z * 2.5, 0.0, 1.0 );

    lfFoam += lFoamTextureAVec3.r * pow( lfFoamArea, 1.0 );
    lfFoam += lFoamTextureBVec3.r * pow( lfFoamArea, 1.0 );

    lfFoam += lFoamTextureAVec3.g * pow( lfWaveArea, 2.0 );
    lfFoam += lFoamTextureBVec3.g * pow( lfWaveArea, 2.0 );

    lfFoam += lFoamTextureAVec3.b * pow( lfFoamArea, 10.0 );
    lfFoam += lFoamTextureBVec3.b * pow( lfFoamArea, 10.0 );
    lfFoam = min( lfFoam, 1.0 );

    lfFoam *= lUniforms.mpCustomPerMaterial->gFoamColourVec4.a;

    lFragmentColourVec4.rgb = lFragmentColourVec4.rgb + /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gFoamColourVec4.rgb ) * lfFoam;
    lFragmentColourVec4.a    = mix( lFragmentColourVec4.a, 1.0, lfFoam * lfFoam );
   // lFragmentColourVec4.a    = clamp( lFragmentColourVec4.a + lfFoam, 0.0, 1.0 );

    lFoamNormalVec3          = normalize( (lFoamNormalVec3 + lFoamNormal2Vec3) * 0.6 + normalize( -lUniforms.mpPerFrame->gLightDirectionVec4.xyz ) + lLocalNormalVec3 );

    lMappedNormalVec3        = mix( lMappedNormalVec3, lFoamNormalVec3, lfFoam );

    //-----------------------------------------------------------------------------
    ///
    ///     Lighting
    ///
    //-----------------------------------------------------------------------------
    float lfHeight = 0.0;
    vec3 lWorldUpVec3 = GetWorldUp( IN( mWorldPositionVec4 ).xyz, lUniforms.mpCommonPerMesh->gPlanetPositionVec4, lfHeight );

    float lfShadow = 0.0;

    lfShadow = ComputeShadowIntensity( DEREF_PTR( lUniforms.mpCustomPerMaterial ), DEREF_PTR( lUniforms.mpPerFrame ), DEREF_PTR( lUniforms.mpCommonPerMesh ), IN( mWorldPositionVec4 ).xyz + lMappedNormalVec3, lLocalNormalVec3, lProjectedCoordsVec3.xy, true ) * 0.5;

    vec3 lUp = GetWorldUp( lUniforms.mpPerFrame->gViewPositionVec3, lUniforms.mpCommonPerMesh->gPlanetPositionVec4 );
    vec3 lCross1 = normalize( cross( lUp, vec3( 0.0, 0.0, 1.0 ) ) );
    vec3 lCross2 = normalize( cross( lUp, lCross1 ) );
    lCross1 = normalize( cross( lUp, lCross2 ) );
    vec3 lViewPos = lUp * lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;
    vec3 lGroundPos = GetWorldUp( IN( mWorldPositionVec4 ).xyz, lUniforms.mpCommonPerMesh->gPlanetPositionVec4 ) * lUniforms.mpCommonPerMesh->gPlanetPositionVec4.w;
    vec3 lDir = ( lGroundPos - lViewPos ) * 0.001;

    vec2 lCloudTexCoords = vec2( dot( lDir, lCross1 ), dot( lDir, lCross2 ) ) * 0.5;
    lCloudTexCoords += vec2( 0.5, 0.5 );

    lfShadow *= 1.0 - texture2D( lUniforms.mpCustomPerMaterial->gCloudShadowMap, lCloudTexCoords ).r * 0.5;

    lFragmentColourVec4.rgb = ComputeWaterLighting(
        IN( mWorldPositionVec4 ).xyz,
        lMappedNormalVec3,
        lUniforms.mpPerFrame->gViewPositionVec3,
        -lUniforms.mpPerFrame->gLightDirectionVec4.xyz,
        lFragmentColourVec4.xyz,
        lReflectionVec3,
        lUniforms.mpCommonPerMesh->gLightColourVec4,
        lUniforms.mpCommonPerMesh->gPlanetPositionVec4,
        mix( lUniforms.mpCustomPerMaterial->gMaterialParamsVec4.z, 0.0, lfFoam ),
        lUniforms.mpCustomPerMaterial->gMaterialParamsVec4.y,
        mix( lUniforms.mpCustomPerMaterial->gFresnelParamsVec4.w, 0.8, lfFoam ),
        lfShadow );

    //-----------------------------------------------------------------------------
    ///
    ///     Fog
    ///
    //-----------------------------------------------------------------------------
    {
        vec3  lWaterColourNearVec3     = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gWaterColourNearVec4.rgb );
        vec3  lWaterColourFarVec3      = /*GammaCorrectInput*/( lUniforms.mpCustomPerMaterial->gWaterColourFarVec4.rgb );
        vec3  lLightColourVec3         = /*GammaCorrectInput*/( lUniforms.mpCommonPerMesh->gLightColourVec4.rgb );
        float lfWaterHeight            = lUniforms.mpCustomPerMaterial->gWaterFogVec4.r;
        float lfWaterStrength          = lUniforms.mpCustomPerMaterial->gWaterFogVec4.g;
        float lfWaterColourStrength    = lUniforms.mpCustomPerMaterial->gWaterFogVec4.b;
        float lfWaterMultiplyStrength  = lUniforms.mpCustomPerMaterial->gWaterFogVec4.a;

        vec3  lNearPosition = lUniforms.mpPerFrame->gViewPositionVec3 - lPlanetPosition;
        vec3  lFarPosition  = IN( mWorldPositionVec4 ).xyz - lPlanetPosition;
        if( length( lNearPosition ) <  lfRadius + lfWaterHeight )
        {
            float lfDarken          = clamp( dot( -lUniforms.mpPerFrame->gLightDirectionVec4.xyz, normalize( lFarPosition ) ), 0.0, 1.0 );

            float lfFogDistance = length( lFarPosition - lNearPosition );

            float lfFogValue        = lfFogDistance * lfWaterStrength;
            lfFogValue              = 1.0 / exp( lfFogValue * lfFogValue );
            lfFogValue              = 1.0 - clamp( lfFogValue, 0.0, 1.0 );

            float lfWaterFade       = lfFogDistance * lfWaterColourStrength;
            lfWaterFade             = 1.0 / exp( lfWaterFade * lfWaterFade );
            lfWaterFade             = 1.0 - clamp( lfWaterFade, 0.0, 1.0 );

            vec3 lWaterColour        = mix( lWaterColourNearVec3, lWaterColourFarVec3, clamp( lfWaterFade, 0.0, 1.0 ) ) * lLightColourVec3 * lfDarken;
            lFragmentColourVec4.rgb  = mix( lFragmentColourVec4.rgb, lWaterColour, clamp( lfFogValue, 0.0, 1.0 ) );
            lFragmentColourVec4.a    = max( lFragmentColourVec4.a, clamp( lfFogValue * 2.0, 0.0, 1.0 ) );
        }
    }

    if( lfCameraHeight < lfRadius + lUniforms.mpCustomPerMaterial->gWaterFogVec4.r )
    {
        float lfAlphaFade     = saturate( ( lfRadius + lUniforms.mpCustomPerMaterial->gWaterFogVec4.r - lfCameraHeight ) / 15.0 );
        lFragmentColourVec4.a = max( lFragmentColourVec4.a, 0.85 + lfAlphaFade * 0.15 );
    }

    lFragmentColourVec4.a = mix( lFragmentColourVec4.a, 0.0, lfDistanceFade );


    //lFragmentColourVec4 = clamp( lFragmentColourVec4, 0.0, 1.0 );
    //lFragmentColourVec4.a = 1.0;

    FRAGMENT_COLOUR = lFragmentColourVec4;
    FRAGMENT_DEPTH  = LinearToLogDepth_Pixel( IN( mfLogZ_mfDepth_mfWaveHeight ).x, lUniforms.mpPerFrame->gClipPlanesVec4 );

}

#endif