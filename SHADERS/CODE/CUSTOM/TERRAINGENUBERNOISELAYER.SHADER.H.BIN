////////////////////////////////////////////////////////////////////////////////
///
///     @file       ComputeNoise.h
///     @author     ccummings
///     @date       
///
///     @brief      Basic shader to execute a series of Noise3D samples
///
///     Copyright (c) 2016 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

#include "Common/Defines.shader.h"
#include "Custom/TerrainGenCommon.h"

// Declare thread count for each thread group.
[NUM_THREADS(64, 1, 1)]

// Entry point for the compute shader with semantics that define the 
// variations of the ID to determine the thread instance invoked.
void main(uint3 dispatchThreadID : S_DISPATCH_THREAD_ID, cTkGenerateUberNoiseLayer3DComputeUniforms* lpUniforms : S_SRT_DATA)
{
    //get index and bail if gone to far
	uint idx = dispatchThreadID.x;
	if (idx >= lpUniforms->miNumElements)
		return;

    vec3 lPosition = vec3(lpUniforms->mafX[idx], lpUniforms->mafY[idx], lpUniforms->mafZ[idx]);

    lPosition += lpUniforms->mSeedOffset;

    lPosition *= lpUniforms->mfFeatureScale;

    lpUniforms->mafNoise[idx] = UberNoise(
                                    lPosition, 
                                    lpUniforms->miOctaves, 
                                    lpUniforms->mfPerturbFeatures,
                                    lpUniforms->mfSharpToRoundFeatures,
                                    lpUniforms->mfAltitudeErosion,
                                    lpUniforms->mfRidgeErosion,
                                    lpUniforms->mfSlopeErosion,
                                    lpUniforms->mfLacunarity,
                                    lpUniforms->mfGain
                                    );
}
  