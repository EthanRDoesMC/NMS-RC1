////////////////////////////////////////////////////////////////////////////////
///
///     @file       PostProcessFragment.h
///     @author     User
///     @date       
///
///     @brief      DepthOfFieldFragmentShader
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      Compilation defines 


//-----------------------------------------------------------------------------
//      Include files

#include "Common/CommonUniforms.shader.h"

#include "Common/Common.shader.h"
#include "Common/CommonPostProcess.shader.h"
#include "Common/CommonDepth.shader.h"
//#include "Common/CommonFog.shader.h"
//#include "Common/CommonPlanet.shader.h"

// must include this after CommonUniforms
#include "Fullscreen/PostCommon.h"

// =================================================================================================

#if defined( D_GUASS_BLUR_RADIUS_4 )
	#define D_GUASS_BLUR_RADIUS 4
#elif defined( D_GUASS_BLUR_RADIUS_3 )
	#define D_GUASS_BLUR_RADIUS 3
#elif defined( D_GUASS_BLUR_RADIUS_2 )
	#define D_GUASS_BLUR_RADIUS 2
#endif

// =================================================================================================
//
// PARTICLE_BLEND
//
// =================================================================================================

#ifdef D_POSTPROCESS_PARTICLE_BLEND

//-----------------------------------------------------------------------------
//      Global Data

//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION
    
    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

FRAGMENT_MAIN_COLOUR_SRT
{
    //vec4 lFragmentTexVec4;
    vec4 lParticleTexVec4;

    //lFragmentTexVec4 = texture2D( gBufferMap, IN(mTexCoordsVec2)  );	
    lParticleTexVec4 = texture2D( lUniforms.mpCustomPerMesh->gBuffer1Map, IN( mTexCoordsVec2 ).xy );

    //FRAGMENT_COLOUR = vec4( (lFragmentTexVec4.rgb * lParticleTexVec4.a) + lParticleTexVec4.rgb, lFragmentTexVec4.a );	
    
    float lfAlpha =  1.0 - lParticleTexVec4.a;
    if (lfAlpha != 0.0)
    {
        FRAGMENT_COLOUR = vec4( (lParticleTexVec4.rgb / lfAlpha) , lfAlpha );
    } else
    {
        FRAGMENT_COLOUR = vec4( 0.0 );
    }
}

#endif

// =================================================================================================
//
// COPY
//
// =================================================================================================

#ifdef D_POSTPROCESS_COPY

//-----------------------------------------------------------------------------
//      Global Data



//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

FRAGMENT_MAIN_COLOUR_SRT
{			
    //FRAGMENT_COLOUR = vec4( texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2) ).xyz, 1.0 );	
    FRAGMENT_COLOUR = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2) );	
}

#endif


// =================================================================================================
//
// COPY_DEPTH
//
// =================================================================================================

#ifdef D_POSTPROCESS_COPY_DEPTH

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

FRAGMENT_MAIN_COLOUR_DEPTH_SRT
{
    FRAGMENT_DEPTH =  texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2).xy ).x;
}

#endif

// =================================================================================================
//
// DOWNSAMPLE_GBUFFERDEPTH
//
// =================================================================================================

#ifdef D_POSTPROCESS_DOWNSAMPLE_GBUFFERDEPTH

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
IN_SCREEN_POSITION

INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

#ifdef D_PLATFORM_ORBIS
#pragma PSSL_target_output_format(target 0 FMT_32_AR)
#endif

FRAGMENT_MAIN_COLOUR_SRT
{
    vec2 lFlooredTexCoordsVec2 = IN( mTexCoordsVec2 ).xy;
#if 0
    vec2 lSmallBufferSize = vec2( 1920, 1080 ) * 0.5;
    vec2 lLargeBufferSize = vec2( 1920, 1080 );

    int x = int( floor( lFlooredTexCoordsVec2.x * lSmallBufferSize.x ) );
    int y = int( floor( lFlooredTexCoordsVec2.y * lSmallBufferSize.y ) );

    float lfDepth;
    
    // Alternate taking the min and max depth in a crosshatch pattern
    // This helps improves the chance of having a nearby depth when we upsample
    if( x % 2 != y % 2 )
    {
        lfDepth = 9999999.0;
    }
    else
    {
        lfDepth = 0.0;
    }
    
    for( int i = 0; i < 2; i++ )
    {
        for( int j = 0; j < 2; j++ )
        {
            vec2  lTexCoords = lFlooredTexCoordsVec2 + vec2( (float( i )) / lLargeBufferSize.x, (float( j )) / lLargeBufferSize.y );
            float lfNewDepth = FastDenormaliseDepth( lUniforms.mpPerFrame->gClipPlanesVec4, DecodeDepthFromColour( texture2D( lUniforms.mpCustomPerMesh->gBufferMap, lTexCoords ) ) );

            if( x % 2 != y % 2 )
            {
                lfDepth = min( lfDepth, lfNewDepth );
            }
            else
            {
                lfDepth = max( lfDepth, lfNewDepth );
            }
        }
    }
#endif    
    //FRAGMENT_COLOUR = vec4( EncodeDepthToColour( FastNormaliseDepth( lUniforms.mpPerFrame->gClipPlanesVec4, lfDepth ) ) );
    FRAGMENT_COLOUR = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, lFlooredTexCoordsVec2 );
}

#endif


// =================================================================================================
//
// DOWNSAMPLE_DEPTH 
//
// =================================================================================================

#ifdef D_POSTPROCESS_DOWNSAMPLE_DEPTH

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
IN_SCREEN_POSITION

INPUT(vec2, mTexCoordsVec2, TEXCOORD0)
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

#ifdef D_PLATFORM_ORBIS
#pragma PSSL_target_output_format(target 0 FMT_32_AR)
#endif

FRAGMENT_MAIN_COLOUR_SRT
{
    vec2 lTexCoordsVec2 = IN(mTexCoordsVec2).xy;
    float lfDepth = texture2D(lUniforms.mpCustomPerMesh->gBufferMap, lTexCoordsVec2).x;
    FRAGMENT_COLOUR = vec4(LogToLinearDepth(lUniforms.mpPerFrame->gClipPlanesRVec4, lfDepth), 0.0, 0.0, 0.0);
}

#endif




// =================================================================================================
//
// BRIGHTPASS
//
// =================================================================================================

#ifdef D_POSTPROCESS_BRIGHTPASS

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

vec3 
Threshold(
    in vec3 lColour,
    in float lfThreshold,      
    in float lfGain )
{
    vec3 lumcoeff = vec3(0.299,0.587,0.114);
    //vec3 lumcoeff = normalize(vec3(1.0,1.0,1.0));

    float lum = dot(lColour.rgb, lumcoeff);

    float thresh = max((lum-lfThreshold)*lfGain, 0.0);
    return mix( vec3(0.0), lColour, thresh );
    //return vec3( lum );
}

FRAGMENT_MAIN_COLOUR_SRT
{
    vec3 lBrightColourVec3;
    lBrightColourVec3 = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2) ).xyz;
    float lfGlowAlpha = 1.0 - texture2D( lUniforms.mpCustomPerMesh->gBuffer1Map, IN(mTexCoordsVec2) ).a;

    lBrightColourVec3.xyz = TonemapKodak(lBrightColourVec3.xyz) / TonemapKodak( vec3(1.0,1.0,1.0) );

    lBrightColourVec3 = GammaCorrectOutput( lBrightColourVec3 );

    lBrightColourVec3 = Threshold(  lBrightColourVec3, 
                                    min( lUniforms.mpCustomPerMesh->gHDRParamsVec4.y, lfGlowAlpha),  // Threshold
                                    lUniforms.mpCustomPerMesh->gHDRParamsVec4.z );// Offset

    FRAGMENT_COLOUR = vec4( lBrightColourVec3, 1.0 );
    //FRAGMENT_COLOUR = vec4( 0.0, 0.0, 1.0, 1.0 );
}


#endif

// =================================================================================================
//
// BRIGHTPASS
//
// =================================================================================================

#ifdef D_POSTPROCESS_DOWNSAMPLE

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

FRAGMENT_MAIN_COLOUR_SRT
{
    vec2 coord2 = IN( mTexCoordsVec2 ) + vec2( 2.0, 2.0 ) * lUniforms.mpPerFrame->gFrameBufferSizeVec4.zw;
    vec4 lTextureColourVec4;
#if 0
    lTextureColourVec4  = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2) );
    lTextureColourVec4 += texture2D( lUniforms.mpCustomPerMesh->gBufferMap, coord2 );
    lTextureColourVec4 += texture2D( lUniforms.mpCustomPerMesh->gBufferMap, vec2( coord2.x, IN( mTexCoordsVec2 ).y ) );
    lTextureColourVec4 += texture2D( lUniforms.mpCustomPerMesh->gBufferMap, vec2( IN( mTexCoordsVec2 ).x, coord2.y ) );
    lTextureColourVec4 *= 0.25;
#else
    lTextureColourVec4 = texture2D(lUniforms.mpCustomPerMesh->gBufferMap, coord2);
#endif


    FRAGMENT_COLOUR = lTextureColourVec4;
}


#endif


// =================================================================================================
//
// BLUR
//
// =================================================================================================

#ifdef D_POSTPROCESS_GUASS

//-----------------------------------------------------------------------------
//      Global Data

//blur params x = bool x-axis, y = bool y-axis, z = Sigma
// The sigma value for the gaussian function: higher value means more blur
// A good value for 9x9 is around 3 to 5
// A good value for 7x7 is around 2.5 to 4
// A good value for 5x5 is around 2 to 3.5
// ... play around with this based on what you need :)



//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 


STATIC_CONST float pi = 3.14159265;


FRAGMENT_MAIN_COLOUR_SRT
{    
    vec3   incrementalGaussian; // Incremental Gaussian Coefficent Calculation (See GPU Gems 3 pp. 877 - 889)
    vec4   avgValue = vec4(0.0f, 0.0f, 0.0f, 0.0f);
    vec4   lCenter;
    float coefficientSum = 0.0f;
    float sigma;


    lCenter = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2) );    

    // The sigma value for the gaussian function: higher value means more blur
    // A good value for 9x9 is around 3 to 5
    // A good value for 7x7 is around 2.5 to 4
    // A good value for 5x5 is around 2 to 3.5
    // ... play around with this based on what you need :)
    sigma = lUniforms.mpCustomPerMesh->gBlurParamsVec4.z;

    incrementalGaussian.x = 1.0f / (sqrt(2.0f * pi) * sigma);
    incrementalGaussian.y = exp(-0.5f / (sigma * sigma));
    incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;

    // Take the central sample first...
    avgValue                = lCenter * incrementalGaussian.x;
    coefficientSum         += incrementalGaussian.x;
    incrementalGaussian.xy *= incrementalGaussian.yz;

    // Go through the remaining X directional samples (D_GUASS_BLUR_TAPS on each side of the center)
    for (float i = 1.0f; i <= D_GUASS_BLUR_RADIUS ; i++) 
    {
        vec4 lTexPos;
        vec4 lTexNeg;

        lTexPos = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2).xy + i * (lUniforms.mpCustomPerMesh->gBlurParamsVec4.xy * lUniforms.mpPerFrame->gFrameBufferSizeVec4.zw));
        lTexNeg = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2).xy - i * (lUniforms.mpCustomPerMesh->gBlurParamsVec4.xy * lUniforms.mpPerFrame->gFrameBufferSizeVec4.zw));

        avgValue += lTexNeg * incrementalGaussian.x;         
        avgValue += lTexPos * incrementalGaussian.x;
               
        coefficientSum         += 2 * incrementalGaussian.x;
        incrementalGaussian.xy *= incrementalGaussian.yz;
    }

   FRAGMENT_COLOUR = avgValue / coefficientSum;
   
}
#endif


// =================================================================================================
//
// BLUR_KAWASE
//
// =================================================================================================

#if defined(D_POSTPROCESS_BLUR_KAWASE) || defined(D_POSTPROCESS_BLUR_KAWASE_PRESERVE_ALPHA)

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//    Functions

FRAGMENT_MAIN_COLOUR_SRT
{
#ifdef D_POSTPROCESS_BLUR_KAWASE
    FRAGMENT_COLOUR = vec4( BlurKawase( SAMPLER2DPARAM( lUniforms.mpCustomPerMesh->gBufferMap ), IN(mTexCoordsVec2), lUniforms.mpPerFrame->gFrameBufferSizeVec4.zw, lUniforms.mpCustomPerMesh->gBlurParamsVec4.x ).xyz, 1.0 );
#else
    FRAGMENT_COLOUR =       BlurKawase( SAMPLER2DPARAM( lUniforms.mpCustomPerMesh->gBufferMap ), IN(mTexCoordsVec2), lUniforms.mpPerFrame->gFrameBufferSizeVec4.zw, lUniforms.mpCustomPerMesh->gBlurParamsVec4.x );
#endif 
    
}

#endif



// =================================================================================================
//
// DEBUG
//
// =================================================================================================

#ifdef D_POSTPROCESS_COMBINE

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END

//-----------------------------------------------------------------------------
//      Functions 

FRAGMENT_MAIN_COLOUR_SRT
{                
    vec3 lFragCol;
    vec2 newCoords;

    newCoords = IN(mTexCoordsVec2).xy;
#if defined( D_PLATFORM_PC )
    lFragCol     = GammaCorrectInput( texture2D( lUniforms.mpCustomPerMesh->gBufferMap, newCoords ).rgb );
#else
    lFragCol     = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, newCoords ).rgb;
#endif
    lFragCol.xyz = TonemapKodak(lFragCol) / TonemapKodak( vec3(1.0,1.0,1.0) );

    lFragCol     = GammaCorrectOutput( lFragCol );

    lFragCol = texture3DLod( lUniforms.mpCustomPerMesh->gColourLUT, lFragCol, 0.0 ).rgb;

    //float lfDepth = texture2D( lUniforms.mpCustomPerMesh->gBuffer1Map, newCoords ).x;    
    vec3 lumcoeff = vec3(0.299,0.587,0.114);
    FRAGMENT_COLOUR = vec4( lFragCol, dot(lFragCol, lumcoeff ) );
    //FRAGMENT_DEPTH  = lfDepth;
}

#endif

// =================================================================================================
//
// ADDITION
//
// =================================================================================================

#ifdef D_POSTPROCESS_ADDITION_4

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END

//-----------------------------------------------------------------------------
//      Functions 
vec2 nrand(vec2 n)
{
    vec2 result;
    result.x = fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);
    result.y = fract(cos(mod(123456789.0, 1e-7 + 256. * dot(vec2(23.1406926327792690, 2.6651441426902251), n))));
    return result;
}

FRAGMENT_MAIN_COLOUR_SRT
{   
    vec3 lFragCol;
    vec2 newCoords = IN(mTexCoordsVec2).xy;

#if defined( D_PLATFORM_PC )
    lFragCol = GammaCorrectInput(texture2D(lUniforms.mpCustomPerMesh->gBuffer1Map, newCoords).xyz);
#else
    lFragCol = texture2D(lUniforms.mpCustomPerMesh->gBuffer1Map, newCoords).xyz;
#endif

    // Deband

    // but.. don't deband anything other than the background sky/space

    float lfDepth  = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, newCoords ).x ;    

    if( lfDepth > 0.9999999 )
    {    
        vec2 invViewportSize = lUniforms.mpPerFrame->gFrameBufferSizeVec4.zw;    
        vec2 rand = nrand(newCoords + fract(lUniforms.mpPerFrame->gfTime));
        vec2 offsetCoords = newCoords + ( ( (rand * vec2(31.0, 31.0)) - 15.0 ) * invViewportSize.xy );
        lfDepth  = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, offsetCoords ).x ;              
        if( lfDepth > 0.9999999 )
        {
        #if defined( D_PLATFORM_PC )
            vec3 lFragColRandomTap = GammaCorrectInput(texture2D(lUniforms.mpCustomPerMesh->gBuffer1Map, offsetCoords ).xyz);
        #else
            vec3 lFragColRandomTap = texture2D(lUniforms.mpCustomPerMesh->gBuffer1Map, offsetCoords ).xyz;
        #endif        
            vec3 diff = abs(lFragCol - lFragColRandomTap);
            lFragCol = ((diff.x + diff.y + diff.z) < (10.0 / 255.0)) ? lFragColRandomTap : lFragCol;
         }
    }

    // Combine

#if defined( D_PLATFORM_PC )
    lFragCol += GammaCorrectInput( texture2D( lUniforms.mpCustomPerMesh->gBuffer2Map, newCoords ).xyz );
    lFragCol += GammaCorrectInput( texture2D( lUniforms.mpCustomPerMesh->gBuffer3Map, newCoords ).xyz );
    lFragCol += GammaCorrectInput( texture2D( lUniforms.mpCustomPerMesh->gBuffer4Map, newCoords ).xyz );
#else
    lFragCol += texture2D( lUniforms.mpCustomPerMesh->gBuffer2Map, newCoords ).xyz;
    lFragCol += texture2D( lUniforms.mpCustomPerMesh->gBuffer3Map, newCoords ).xyz;
    lFragCol += texture2D( lUniforms.mpCustomPerMesh->gBuffer4Map, newCoords ).xyz;
#endif    
    FRAGMENT_COLOUR = vec4( GammaCorrectOutput( lFragCol ) , 1.0 );
    

}

#endif

// =================================================================================================
//
// ADDITION_2
//
// =================================================================================================

#ifdef D_POSTPROCESS_ADDITION_2

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END

//-----------------------------------------------------------------------------
//      Functions 

FRAGMENT_MAIN_COLOUR_SRT
{

    //Debug

    vec3 lFragCol;
    vec2 newCoords;

    newCoords = IN( mTexCoordsVec2 ).xy;

    lFragCol  = texture2D( lUniforms.mpCustomPerMesh->gBuffer1Map, newCoords ).xyz;
    lFragCol += texture2D( lUniforms.mpCustomPerMesh->gBuffer2Map, newCoords ).xyz;

    FRAGMENT_COLOUR = vec4( lFragCol, 1.0 );


}

#endif

// =================================================================================================
//
// GAMMACORRECT
//
// =================================================================================================

#ifdef D_POSTPROCESS_GAMMACORRECT

//-----------------------------------------------------------------------------
//      Global Data



//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END

//-----------------------------------------------------------------------------
//      Functions 

FRAGMENT_MAIN_COLOUR_SRT
{
    //Debug
    vec4 lColourVec4 = texture2D( lUniforms.mpCustomPerMesh->gBufferMap, IN(mTexCoordsVec2).xy );

    vec3 lFragCol;

    lFragCol     = lColourVec4.rgb;

    lFragCol.xyz = TonemapKodak(lFragCol) / TonemapKodak( vec3(1.0) );

    lFragCol     = GammaCorrectOutput( lFragCol );

    lFragCol     = texture3DLod( lUniforms.mpCustomPerMesh->gColourLUT, lFragCol, 0.0 ).rgb;

    FRAGMENT_COLOUR = vec4( lFragCol, lColourVec4.a );
}

#endif


// =================================================================================================
//
// BILATERAL UPSAMPLE
//
// =================================================================================================

#ifdef D_POSTPROCESS_BILATERAL_UPSAMPLE
//-----------------------------------------------------------------------------
//      Global Data



//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//    Functions

#if defined( D_PLATFORM_ORBIS )
    vec2
    BlurUVOffsets( in const uint luIdx )
    {
		// this form allows the nearest depth index search to compute the offsets without branching.
    	return vec2( (luIdx & 1) ? 0.5 : -0.5, (luIdx & 2) ? 0.5 : -0.5 );
    }
#else       
    #define BlurUVOffsets( idx )    ( kaBlurUVOffsets[ ( idx ) ] )
    const vec2 kaBlurUVOffsets[ 4 ] = vec2[ 4 ]( vec2( -0.5, -0.5 ), vec2( 0.5, -0.5 ), vec2( -0.5, 0.5 ), vec2( 0.5, 0.5 ) );
#endif    


vec4
BilateralBlur(
    SAMPLER2DARG( lColourTexture ),
    SAMPLER2DARG( lLowResDepthTexture ),
    SAMPLER2DARG( lHighResDepthTexture ),
    SAMPLER2DARG( lScatteringTexture ),
    SAMPLER2DARG( lGBuffer ),
    in vec2 lTexCoordsVec2,
    in vec2 lTexSizeVec2,
    in vec4 lClipPlanes )
{
    float lafDownsampledDepth[4];
    float lfFullResDepth;
    vec4  lColourReadVec4;
    vec2  lAdjustedTexCoordsVec2;

    lfFullResDepth           = FastDenormaliseDepth( lClipPlanes, DecodeDepthFromColour( texture2D( lHighResDepthTexture, lTexCoordsVec2 ) ) );
    lafDownsampledDepth[ 0 ] = FastDenormaliseDepth( lClipPlanes, DecodeDepthFromColour( texture2D( lLowResDepthTexture, lTexCoordsVec2 + ( BlurUVOffsets( 0 ) / lTexSizeVec2 ) ) ) );
    lafDownsampledDepth[ 1 ] = FastDenormaliseDepth( lClipPlanes, DecodeDepthFromColour( texture2D( lLowResDepthTexture, lTexCoordsVec2 + ( BlurUVOffsets( 1 ) / lTexSizeVec2 ) ) ) );
    lafDownsampledDepth[ 2 ] = FastDenormaliseDepth( lClipPlanes, DecodeDepthFromColour( texture2D( lLowResDepthTexture, lTexCoordsVec2 + ( BlurUVOffsets( 2 ) / lTexSizeVec2 ) ) ) );
    lafDownsampledDepth[ 3 ] = FastDenormaliseDepth( lClipPlanes, DecodeDepthFromColour( texture2D( lLowResDepthTexture, lTexCoordsVec2 + ( BlurUVOffsets( 3 ) / lTexSizeVec2 ) ) ) );

    const float lfUpsampleDepthThreshold = 10.0; // world space

    uint  luNearestDepthIndex = 0u;
    float currentDepthDiff    = abs( lafDownsampledDepth[0] - lfFullResDepth );
    bool  lbRejectSample      = currentDepthDiff < lfUpsampleDepthThreshold;
    float lfMinDepthDiff      = currentDepthDiff;
    
    for ( uint i = 1u; i < 4u; i++ )
    {
        currentDepthDiff = abs( lafDownsampledDepth[i] - lfFullResDepth );
        lbRejectSample   = lbRejectSample && currentDepthDiff < lfUpsampleDepthThreshold;

        if ( currentDepthDiff < lfMinDepthDiff )
        {
            lfMinDepthDiff      = currentDepthDiff;
            luNearestDepthIndex = i;
        }
    }

    // Avoid blocky artifacts using edge detection
    if ( lbRejectSample )
    {
        lAdjustedTexCoordsVec2 = lTexCoordsVec2;
    }
    else
    {
        lAdjustedTexCoordsVec2  = lTexCoordsVec2 + ( BlurUVOffsets( luNearestDepthIndex ) / lTexSizeVec2 );
    }

    lColourReadVec4 = texture2D( lColourTexture, lAdjustedTexCoordsVec2 );

    //
    //if( lTexCoordsVec2.x > 0.66 )
    //{
    //    //lColourReadVec4.a = 1.0;
    //}
    //else //if( lTexCoordsVec2.x > 0.333 )
    //{
    //    //lTexCoordsVec2.x += 0.333;
    //    
    //}
    //else
    //{    
    //    lTexCoordsVec2.x += 0.666;
    //    float lfDepth = DecodeDepthFromColour( texture2D( lLowResDepthTexture, lTexCoordsVec2 ).xyz ) * lClipPlanes.y;
    //    lColourReadVec4 = GetDepthColour( lfDepth );

    //}
    
    //lColourReadVec4 = GetDepthColour( lfFullResDepth );
    lColourReadVec4.a = clamp( lColourReadVec4.a, 0.0, 1.0 );

    return lColourReadVec4;
}
 
FRAGMENT_MAIN_COLOUR_SRT
{
    FRAGMENT_COLOUR = BilateralBlur( SAMPLER2DPARAM( lUniforms.mpCustomPerMesh->gBufferMap ),
                                     SAMPLER2DPARAM( lUniforms.mpCustomPerMesh->gBuffer1Map ),
                                     SAMPLER2DPARAM( lUniforms.mpCustomPerMesh->gBuffer2Map ),
                                     SAMPLER2DPARAM( lUniforms.mpCustomPerMesh->gBuffer3Map ),
                                     SAMPLER2DPARAM( lUniforms.mpCustomPerMesh->gBuffer4Map ),
                                     IN( mTexCoordsVec2 ),
                                     vec2( 1920.0, 1080.0 ) * 0.5,
                                     lUniforms.mpPerFrame->gClipPlanesVec4 );
}

#endif


// =================================================================================================
// 
// D_POSTPROCESS_DEPTH_AWARE_H_GUASS / D_POSTPROCESS_DEPTH_AWARE_V_GUASS
//
// =================================================================================================

#if defined( D_POSTPROCESS_DEPTH_AWARE_H_GUASS ) || defined( D_POSTPROCESS_DEPTH_AWARE_V_GUASS )

//-----------------------------------------------------------------------------
//      Global Data


//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    IN_SCREEN_POSITION

    INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )
DECLARE_END


//-----------------------------------------------------------------------------
//      Functions 

#define GaussFilterWeights( idx )       gauss_filter_weights[ ( idx ) ]

// http://dev.theomader.com/gaussian-kernel-calculator/

vec4
GatherGauss(
    SAMPLER2DARG( lColourTexture ),
    SAMPLER2DARG( lDepthTexture ),
    in vec2 lFrameBufferSizeRecipVec2,
    in vec2 blurDirection,
    in vec2 uv,
    in vec4 lClipPlanes )
{    
#if defined ( D_PLATFORM_ORBIS )
#define NUM_SAMPLES_HALF 4
// sigma 2.4 Kernel Size = 9
    const float gauss_filter_weights[5] = { 0.175713,	0.161305,	0.124789,	0.081355,	0.044695 };
#else
// sigma 2.765 Kernel Size = 15
#define NUM_SAMPLES_HALF 7
    const float gauss_filter_weights[8] = { 0.14446445, 0.13543542, 0.11153505, 0.08055309, 0.05087564, 0.02798160, 0.01332457, 0.00545096 };
#endif
    float centerDepth;
    float BLUR_DEPTH_FALLOFF = lClipPlanes.y * 2.0; // weighting fall off to zero over 50cm
    centerDepth = DecodeDepthFromColour( texture2D( lDepthTexture, uv ) );
	centerDepth *= BLUR_DEPTH_FALLOFF;

    float accumWeights = GaussFilterWeights( 0 );
    vec4  accumResult = texture2D(lColourTexture, uv) * accumWeights;

    for ( int r = 1; r <= NUM_SAMPLES_HALF; ++r )
    {        
        vec2 uvOffset      = lFrameBufferSizeRecipVec2 * blurDirection * float( r );
        vec4 kernelSample1 = texture2D(lColourTexture, uv - uvOffset);
        vec4 kernelSample2 = texture2D(lColourTexture, uv + uvOffset);

        float kernelDepth1 = DecodeDepthFromColour(texture2D(lDepthTexture, uv - uvOffset)) * BLUR_DEPTH_FALLOFF;
        float kernelDepth2 = DecodeDepthFromColour(texture2D(lDepthTexture, uv + uvOffset)) * BLUR_DEPTH_FALLOFF;
        
        // Simple depth-aware filtering
        float depthDiff1 = abs(kernelDepth1 - centerDepth);
        float depthDiff2 = abs(kernelDepth2 - centerDepth);

        float g1 = saturate(1.0 - (depthDiff1 * depthDiff1));
        float g2 = saturate(1.0 - (depthDiff2 * depthDiff2));

        float gauss_weight = GaussFilterWeights( r );
        float weight1 = g1 * gauss_weight;
        float weight2 = g2 * gauss_weight;

        accumResult += weight1 * kernelSample1; 
        accumResult += weight2 * kernelSample2;

        accumWeights += weight1;
        accumWeights += weight2;
    }

    return  accumResult / accumWeights;
    //return vec4( accumWeights );
}

FRAGMENT_MAIN_COLOUR_SRT
{
    FRAGMENT_COLOUR = GatherGauss( 
                            SAMPLER2DPARAM( lUniforms.mpCustomPerMesh->gBufferMap ), 
                            SAMPLER2DPARAM( lUniforms.mpCustomPerMesh->gBuffer1Map ),
#if defined ( D_PLATFORM_ORBIS )
                            vec2(1.0) / vec2(1920.0 * 0.5, 1080.0 * 0.5),
#else
                            lUniforms.mpPerFrame->gFrameBufferSizeVec4.zw,
#endif
#if defined( D_POSTPROCESS_DEPTH_AWARE_H_GUASS )
                            vec2(1.0, 0.0),
#else
                            vec2(0.0, 1.0),
#endif
                            IN( mTexCoordsVec2 ),
                            lUniforms.mpPerFrame->gClipPlanesVec4 );
}

#endif


